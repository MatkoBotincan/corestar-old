Error messages:

- Lexer: Line/Column information instead of nth character. Mention unexpected character. Not all exception are caught, eg. "Fatal error: exception Logic_lexer.Error(_, 268, 269)".
- Parser: Parsing Errors should mention which token was expected.
- "Cannot find Location!": Give the name of the location that could not be found!
- No parsing error occurs when the specification contains undefined predicates or predicates/definitions with wrong number of arguments. Thus, typos in predicate names, for example, could go by unnoticed.
- Parser: Recover from errors so more than one syntax error can be detected.
- Check whether the type field in the field predicate represents a (syntactically) valid type!

Grammar:

- Jimple parser cannot deal with nested comments.

Syntax:

- Too many bars ("|"): Used to split formulae into pure and spatial subformulae, part of the 'entails' token ("|-"), and part of the disjunction token ("||"). Could maybe use different tokens for disjunctions (eg. "or", "\/") or entailment?
- Full Java class names tend to get rather long (eg. "java.util.LinkedList$Element") so it would be convenient if one could either define abbreviations or have something similar to Java's "import" operator.
- Contrary to specifications, in files describing interference rules fields must be enclosed by quotation marks. Consistent syntax for logic and specification files might be more intuitive.
- In specification, it might be useful to introduce "holes" so that the user does not have to introduce a new variable name when its value does not matter.
- Is there a reason for using semicolons in parameter lists (eg. "Node(x, {element=o; next=n})")? Why do we not use commas?
- Why do method specifications have to end with a semicolon? It is easy to forget and even without a semicolon at the end, it is very clear where a specification ends.
- Infix operators could improve readability of terms involving arithmetic.
- Allow "simultaneous equalities" (e.g. ?a = ?b = ?c) in specs and logic rules.
- Java's boolean values true and false are represented as 1 and 0, respectively, in jimple. Thus, in specification true and false are numeric_const(1) and numeric_const(0). Readability could be increased by allowing "true" and "false" instead.
- Allow negative integer constants (eg. "numeric_const(-1)") in specs.
- Support infix notation in rewrite rules.
- Currently the signature of field in "?e.?t |-> ?v" is not allowed to be a variable.

Functionality

- Inlining of (private) functions could simplify specifications (ie. make them less dependent of the implementation).
- If neither specification of a method nor implementation (nor logic rules) have changed then there is no need to re-prove the specification of this method.
- Throw statement has not been implemented yet.
- Allow user to specify a time-out for proving a method specification.
- When compiling classes that contain inner classes the javac compiler separates outer class and inner classes into individual classes and inserts helper methods into the outer class that give the inner classes access to fields and methods of the outer class. To verify inner classes it is therefore necessary to write specifications for these helper methods. However, since these methods are in essence just thin wrappers, the additional specifications just duplicate already existing ones.
- Add command line option to the jstar program that takes a list of names of the methods that the user wants to verify (or wants to see traces of).
- jStar does not fully support inheritance of fields. Example: AbstractList has a (protected) field modCount. Since LinkedList is a sub class of AbstractList, within the LinkedList class field(?i, <LinkedList: int modCount>, ?e1) and field(?i, <AbstractList: int modCount>, ?e2) denote the same field.
- Make a clear distinction between positive and negative numbers to simplify writing rules that rely on the sign of a number.

Output

- Show traces of failed proofs (or repeat error messages) at the bottom so the user does not have search for too long.
- Don't print traces for specification that have been successfully proven in previous runs of jStar.
- Debug messages (e.g. "Asking the audience", "Apply or right") are somewhat cryptic.
- Duplicate specifications should result in a warning message.
- Print warning if there are specifications for non-existent methods.
- Add a string field to the exception "Debug.unsupported" that contains information about what went wrong.
- In some cases, readability might be improved by printing (part of) the term that has been matched with the conclusion of a rule when the rule is applied (good examples are field_field_contradiction, field_remove).

Semantics
- Is there a semantic difference between "or" and "||" (in the premise) in logic rules?
