abstract class OLIST extends ANY {

	abstract SEQUENCE model()
	requires {
		int $res;
		$res = 1;
	}
	ensures {
		int $res;
		$res = 1;
	}
	;

	abstract void remove_first()
	requires {
		int a1;
		int a2;
		OLIST Current;
		int $res;
		Current := @this: OLIST;
		a1 = virtualinvoke Current.<OLIST: SEQUENCE model()>();
		a2 = virtualinvoke a1.<SEQUENCE: int is_nil()>();
		$res = a2 == 0;
	}
	old {
		int $old1;
		OLIST Current;
		int a1;
		int a2;
		int $res;
		
		Current := @this: OLIST;
		$old1 = virtualinvoke Current.<OLIST: SEQUENCE model()>();
	}
	ensures {
		int $old1;
		OLIST Current;
		int a1;
		int a2;
		int $res;
		
		Current := @this: OLIST;
		a1 = virtualinvoke Current.<OLIST: SEQUENCE model()>();
		a2 = virtualinvoke $old1.<SEQUENCE: SEQUENCE tail()>();
		$res = virtualinvoke a1.<SEQUENCE: int eq(SEQUENCE)>(a2);
	}
	;

	abstract int is_empty();

	abstract void empty_inv()
	requires {
		int a1;
		int a2;
		int a3;
		OLIST Current;
		int $res;

		Current := @this: OLIST;
		a1 = virtualinvoke Current.<OLIST: int is_empty()>();
		a2 = virtualinvoke Current.<OLIST: SEQUENCE model()>();
		a3 = virtualinvoke a2.<SEQUENCE: int is_nil()>();
		$res = a1 == a3;
	}
	;
}
