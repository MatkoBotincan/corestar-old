class OLIST
{
	abstract void init() :
		{ }
		{ OL(@this:,{l=empty()}) };
	abstract void insert(int) :
		{ OL(@this:,{l=_a}) }
		{ OL(@this:,{l=app(_c,cons(@parameter0:,_d))}) * _a=app(_c,_d) };
	abstract void remove_first() :
		{ OL(@this:,{l=cons(_e,_a)}) }
		{ OL(@this:,{l=_a}) };
	abstract int first() :
		{ OL(@this:,{l=cons(_e,_a)}) }
		{ OL(@this:,{l=cons(_e,_a)}) * $ret_v1=_e };
	abstract int has(int) :
		{ OL(@this:,{l=_a}) }
		{ OL(@this:,{l=_a}) * $ret_v1=elem(@parameter0:,_a) };
	abstract int count() :
		{ OL(@this:,{l=_a}) }
		{ OL(@this:,{l=_a}) * $ret_v1=len(_a) };
	abstract int is_empty() :
		{ OL(@this:,{l=_a}) }
		{ OL(@this:,{l=_a}) * $ret_v1=builtin_eq(_a,empty()) };
	abstract void count_non_negative() :
		{ OL(@this:,{l=_a}) }
		{ OL(@this:,{l=_a}) };
	abstract void empty_definition() :
		{ OL(@this:,{l=_a}) }
		{ OL(@this:,{l=_a}) };
}

