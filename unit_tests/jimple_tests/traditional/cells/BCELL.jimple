class BCELL extends CELL {

	int my_bvalue;

	void <init>()
	requires {
		int $res;
		$res = 1;
	}
	ensures {
		BCELL Current;
		int a1;
		int $res;
		Current := @this: BCELL;
		a1 = virtualinvoke Current.<BCELL: int value()>();
		if a1 != 10 goto label_false;
		$res = 1;
		goto label_exit;

		label_false:
		$res = 0;

		label_exit:
	}
	{
		BCELL Current;
		Current := @this: BCELL;
		specialinvoke Current.<CELL: void <init>()>();
		Current.<BCELL: int my_bvalue> = 10;
	}

	void set_value(int)
	requires {
		int $res;
		$res = 1;
	}
	ensures {
		BCELL Current;
		int a1;
		int a2;
		int $res;
		Current := @this: BCELL;
		a1 := @parameter0: int;
		a2 = virtualinvoke Current.<BCELL: int value()>();
		if a1 != a2 goto label_false;
		$res = 1;
		goto label_exit;

		label_false:
		$res = 0;

		label_exit:
	}
	{
		BCELL Current;
		int r1;
		Current := @this: BCELL;
		r1 := @parameter0: int;
		specialinvoke Current.<CELL: void set_value(int)>(r1);
		Current.<BCELL: int my_bvalue> = r1;		
	}

	int value()
	requires {
		int $res;
		$res = 1;
	}
	ensures {
		int $res;
		$res = 1;
	}
	{
		BCELL Current;
		int r1;
		Current := @this: BCELL;
		r1 = Current.<BCELL: int my_bvalue>;
		return r1;
	}

}
