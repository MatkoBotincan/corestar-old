class java.lang.Object {
    void <init>() static: 
    {}{}
}



interface Ast
{
void accept(Visitor) : 
      { Visitor(@parameter0:,{context=_z}) * Ast(@this:,{content=_x}) } 
      { Visited(@parameter0:,{content=_x;context=_z;ast=@this:}) };
}






class Const
{
export Ast(x,content=y) = y = const(_v) * field(x,<Const: int v>,_v) ;

void <init>(int) : 
       { } { Ast$(@this:, {content=const(@parameter0:)})};

void accept(Visitor) static: 
       { @this: : Const * Visitor(@parameter0:,{context=_z}) * Ast(@this:,{content=_x}) } 
       { Visited(@parameter0:,{content=_x;context=_z;ast=@this:})};

}






class Plus
{
export Ast(x,content=y) = 
  y=plus(_lv,_rv) 
   * field(x,<Plus: Ast left>,_l) 
   * field(x,<Plus: Ast right>,_r) 
   * Ast(_l,{content=_lv}) 
   * Ast(_r,{content=_rv});

void <init>(Ast, Ast) : 
       { Ast(@parameter0:,{content=_x}) * Ast(@parameter1:, {content=_y})} 
       { Ast$(@this:, {content=plus(_x,_y)})};

void accept(Visitor) static:
       { @this: : Plus 
         * Visitor(@parameter0:,{context=_z}) * Ast(@this:,{content=_x}) } 
       { Visited(@parameter0:,{content=_x;context=_z;ast=@this:})};

void accept(Visitor) :
       { Visitor(@parameter0:,{context=_z}) * Ast(@this:,{content=_x}) } 
       { Visited(@parameter0:,{content=_x;context=_z;ast=@this:})};
}







class Visitor
{
void visitC(Const) : 
       { @parameter0: : Const  
         * Visitor(@this:,{context=_z}) *  Ast(@parameter0:,{content=_x}) } 
       { Visited(@this:,{content=_x;context=_z;ast=@parameter0:})};

void visitP(Plus) : 
       { @parameter0: : Plus 
         * Visitor(@this:,{context=_z}) * Ast(@parameter0:,{content=_x})}
       { Visited(@this:,{content=_x;context=_z;ast=@parameter0:}) };
}



class Sum
{

define Visitor(x,context=y) = 
   field(x,<Sum: int amount>,y);

define Visited(x,content=z;context=y;ast=a) = 
   field(x,<Sum: int amount>,builtin_plus(y,sum(z))) * Ast(a,{content=z});

void <init>() : { } { Visitor$(@this:,{context=numeric_const(0)}) };


void visitP(Plus) static:
       { @parameter0: : Plus *  @this: : Sum 
         * Visitor(@this:,{context=_z}) * Ast(@parameter0:,{content=_p})}
       { Visited(@this:,{content=_p;context=_z;ast=@parameter0:}) };

void visitC(Const) static:
       { @parameter0: : Const *  @this: : Sum 
         * Visitor(@this:,{context=_z}) *  Ast(@parameter0:,{content=_x}) } 
       { Visited(@this:,{content=_x;context=_z;ast=@parameter0:})};

}




class RZ
{
define Visitor(x,context=y) = 
		     field(x,<RZ: boolean isZero>,false())
    		*    field(x,<RZ: Ast newl>,_)
		*    field(x,<RZ: boolean isChanged>, false())
;
define Visited(x,content=z;context=y;ast=a) = 
	             field(x,<RZ: boolean isZero>,_iz)
    		*    field(x,<RZ: Ast newl>,_al)
		*    field(x,<RZ: boolean isChanged>, _ic)
		*    Ast(_al2, {content=rz(z)})
		*    ( _iz != false() * rz(z) = const(zero())
		     ||  _iz = false() * rz(z) != const(zero()) )
		*    (  _ic != false() * _al = _al2
		     || _ic == false() * _al2 = a )
;

void <init>() static: { } { Visitor$RZ(@this:,{context=_q})};

void visitP(Plus) static:
       { @parameter0: : Plus * @this: : RZ 
         * Visitor(@this:,{context=_z}) * Ast(@parameter0:,{content=_v})}
       { Visited(@this:,{content=_v;context=_z;ast=@parameter0:}) };

void visitC(Const) static:
       { @parameter0: : Const * @this: : RZ 
         * Visitor(@this:,{context=_z}) *  Ast(@parameter0:,{content=_x}) } 
       { Visited(@this:,{content=_x;context=_z;ast=@parameter0:})};

Ast test1() : 
  { }
  { Ast(return, {content=const(numeric_const("0"))}) } ;

}

