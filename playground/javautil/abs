/** Roll up nodes and list segments. **/

rule node_rollup_abs:
  || field(?i, "<java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>", ?ip) *
     field(?i, "<java.util.LinkedList$Entry: java.util.LinkedList$Entry next>", ?in) *
     field(?i, "<java.util.LinkedList$Entry: java.lang.Object element>", ?a) |- |
if
  || node(?i, ?ip, ?in, ?a) |- |

rule dseg_node_rollup_abs:
  || node(?i, ?ip, ?in, ?a) |- |
if
  || dseg_ne(?i, ?ip, ?in, ?i, cons(?a, empty())) |- |

rule dseg_cons_rollup_abs:
  || node(?i, ?ip, _k, ?a) * dseg(_k, ?i, ?jn, ?j, ?alpha) |- |
where
  _k notincontext;
  _k notin ?i;
  _k notin ?ip;
  _k notin ?a;
  _k notin ?jn;
  _k notin ?j;
  _k notin ?alpha
if
  || dseg_ne(?i, ?ip, ?jn, ?j, cons(?a, ?alpha)) |- |

rule dseg_app_rollup_abs:
  || dseg_ne(?i, ?ip, _jn, _j, ?alpha) * dseg_ne(_jn, _j, ?kn, ?k, ?beta) |- |
where
  _j, _jn notincontext;
  _j, _jn notin ?i;
  _j, _jn notin ?ip;
  _j, _jn notin ?alpha;
  _j, _jn notin ?kn;
  _j, _jn notin ?k;
  _j, _jn notin ?beta
if
  || dseg_ne(?i, ?ip, ?kn, ?k, app(?alpha, ?beta)) |- |

/** Remove unreachable nodes and list segments on the LHS. **/
rule node_garbage_abs:
  || node(_i, ?ip, ?in, ?e) |- |
where
  _i notincontext
if
  || |- |

rule dseg_singleton_garbage_abs:
  || dseg_ne(_i, ?ip, ?in, _i, ?l) |- |
where
  _i notincontext
if
  || |- |

/*rule dseg_disj_cons_abs:
  || (cons(?a, ?alpha) = empty() | dseg(?i, ?ip, ?jn, ?j, cons(?a, ?alpha)))
     || (| dseg_ne(?i, ?ip, ?jn, ?j, cons(?a, ?alpha))) |- |
if
  || dseg_ne(?i, ?ip, ?jn, ?j, cons(?a, ?alpha)) |- |*/

/*
rule dseg_singleton_garbage_abs:
  || dseg_ne(_i, ?ip, ?in, _i, cons(?a, empty()))|- |
where
  _i, ?ip, ?in notincontext
if
  || Garbage |- |*/

/** Length Rules **/
rewrite id_concrete:
  id(?name) = ?name

/*rewrite length:
  length(_x) = id(?y)
without
  length(_x) = id(?z)*/

/*rewrite length_forget :
  builtin_plus(numeric_const("1"), length(?alpha)) = id(?x)
without
  builtin_plus(numeric_const("1"), length(?alpha)) = id(?y)*/

/*rewrite one_hack:
  builtin_plus(numeric_const("1"), ?alpha) = builtin_plus(num(numeric_const("1")), ?alpha)
without
  builtin_plus(numeric_const("1"), ?alpha) = builtin_plus(num(numeric_const("1")), ?alpha)

rewrite plus_num_one_hack1:
  builtin_plus(num(?x), num(numeric_const("1"))) = num(builtin_plus(?x, numeric_const("1")))
without
  builtin_plus(num(?y), num(numeric_const("1"))) = num(builtin_plus(?y, numeric_const("1")))

rewrite plus_num_one_hack2:
  builtin_plus(num(?x), builtin_plus(num(numeric_const("1")), ?alpha)) = builtin_plus(num(builtin_plus(?x, numeric_const("1"))), ?alpha)
without
  builtin_plus(num(?y), builtin_plus(num(numeric_const("1")), ?alpha)) = builtin_plus(num(builtin_plus(?y, numeric_const("1"))), ?alpha)

rewrite num:
  num(?x) = ?y*/

rewrite length_app_abs:
  builtin_plus(length(?alpha), length(?beta)) = length(app(?alpha, ?beta))
without
  | (?beta = empty() |) || (?alpha = empty() |)

/*
rewrite length_cons_abs:
  builtin_plus(numeric_const("1"), length(?alpha)) = length(cons(?a, ?alpha))
if
  cons(?a, ?alpha) = ?b
*/

rewrite plus_one_one_hack:
  builtin_plus(numeric_const("1"), builtin_plus(numeric_const("1"), ?alpha))
  = builtin_plus(id(?x), ?alpha)

rewrite plus_one_one_hack2:
  builtin_plus(_z, builtin_plus(numeric_const("1"), ?alpha))
  = builtin_plus(id(?x), ?alpha)

rewrite plus_one_one_hack3:
  builtin_plus(_z1, builtin_plus(_z2, ?alpha))
  = builtin_plus(id(?x), ?alpha)

/**************/


/*rewrite builtin_plus_one_forget :
  builtin_plus(numeric_const("1"),numeric_const("1")) = id(?x)
without
  builtin_plus(numeric_const("1"),numeric_const("1")) = id(?y)

rewrite builtin_plus_forget :
  builtin_plus(_x, ?y) = id(?z)
without
  builtin_plus(_x, ?y) = id(?w)*/



rewrite builtin_plus_forget :
  builtin_plus(_z,numeric_const("1")) = id(?x)
without
  builtin_plus(_z,numeric_const("1")) = id(?y)
where 
  _z notincontext

/*
rewrite id_concrete :
  id(_x) = _x
**************************/

/*rewrite cons_empty_abs_radical:
  cons(_a, ?alpha) = id(?beta)
without
  cons(_a, ?alpha) = id(?gamma)

rewrite cons_abs:
  cons(_a, cons(_b, ?alpha)) = cons(_a, id(?beta))
without
  cons(_a, cons(_b, ?alpha)) = cons(_a, id(?gamma))*/



rewrite hack1 :
  cons(_z,cons(_x,?y)) = app(elist(cons(_z,s(_x))), ?y)

/* Try this later
rewrite hack1 :
  cons(_x,?y) = app(elist(s(_x)), ?y)
*/

rewrite hack2_e :
  app(elist(?z),cons(_x,?y)) = app(elist(app(?z,s(_x))), ?y)

rewrite hack3_e :
  app(elist(?z),app(elist(?x),?y)) = app(elist(app(?z,?x)), ?y)

rewrite hack2 :
  app(_z,cons(_x,?y)) = app(elist(app(_z,s(_x))), ?y)

rewrite hack3 :
  app(_z,app(elist(?x),?y)) = app(elist(app(_z,?x)), ?y)

rewrite hack4 :
  cons(_z,app(elist(?x),?y)) = app(elist(s(_z),?x), ?y)

rewrite hack4 :
  cons(_z,app(_x,?y)) = app(elist(s(_z),_x), ?y)

rewrite hack5 :
  elist(?x) = id(?w)
without
  elist(?x) = id(?q)

/*rewrite elist_ex_ex:
  elist(_x, _y) = id(?fresh)

rewrite elist_app_ex_slist:
  elist(app(_x, s(_y))) = id(?fresh)

rewrite elist_app_slist_ex:
  elist(app(s(_y), _x)) = id(?fresh)

rewrite elist_ex_cons:
  elist(cons(_x, s(_y)), _z) = id(?fresh)

rewrite elist_ex_app_ex_ex:
  elist(_x, app(_y, _z)) = id(?fresh)

rewrite elist_ex_app_ex_slist:
  elist(_x, app(_y, s(_z))) = id(?fresh)

rewrite elist_ex_app_slist_ex:
  elist(_z, app(s(_y), _x)) = id(?fresh)

rewrite elist_slist_app_ex_ex:
  elist(s(_x), app(_y, _z)) = id(?fresh)

rewrite elist_slist_app_ex_slist:
  elist(s(_x), app(_y, s(_z))) = id(?fresh)

rewrite elist_slist_app_slist_ex:
  elist(s(_z), app(s(_y), _x)) = id(?fresh)

rewrite elist_app_cons_s_s:
  elist(app(cons(_x, s(_y)), s(_z))) = id(?fresh)*/

/*rewrite hack5 :
  id(?w) = ?w*/

rewrite app_nil_abs:
  app(empty(), ?x) = ?x

rewrite app_nil2_abs:
  app(?x, empty()) = ?x

rewrite app_cons_empty:
  app(cons(?a, empty()), ?alpha) = cons(?a, ?alpha)

rule dseg_ineq:
  | ?a != ?i | dseg_ne(?i, ?in, ?jp, ?j, ?l) * field(?a, ?t, ?e) |- |
if
  || dseg_ne(?i, ?in, ?jp, ?j, ?l) * field(?a, ?t, ?e) |- |
