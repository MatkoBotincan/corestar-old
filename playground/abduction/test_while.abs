/*************************************
 * Simple subtraction rules from TACAS 2006 paper
 *************************************/


//Roll up a complete NodeLL if we have both fields.
abstraction field_remove2:
  | field(?x,"<NodeLL: next>",?e1) * field(?x,"<NodeLL: content>",?e2) 
~~>
  | NodeLL(?x,?e1) 


/****************nil() rules******************/

/*
abstraction nil_neq_remove_nodell :
  ?x != nil() | NodeLL(?x,?y)
~~>
 | NodeLL(?x,?y) 

abstraction nil_neq_remove_field :
  ?x != nil() | field(?x,?f,?y) 
~~>
  | field(?x,?f,?y) 

abstraction nil_neq_remove_ls :
  ?x != nil() | ls(?x,?y) 
~~>
  | ls(?x,?y) 
*/

/*************** Junk Rules *******************/

abstraction garbage_garbage :
 | Garbage * Garbage 
~~>
 | Garbage 



abstraction gb1_ls :
| ls(_x,?e) ~~> | Garbage 
where 
   _x notincontext 



abstraction gb1_ast :
 | Ast(_x,?e) ~~> | 
where 
   _x notincontext 


abstraction gb1_pto :
 | NodeLL(_x,?e) ~~> | Garbage 
where 
   _x notincontext 


abstraction gb2_ls_ls:
 | ls(_x,_y) * ls(_y,_x) ~~> | Garbage 
where 
   _x,_y notincontext



abstraction gb2_ls_pto:
 | ls(_x,_y) * NodeLL(_y,_x) ~~> | Garbage 
where 
   _x,_y notincontext



abstraction gb2_pto_pto:
 | NodeLL(_x,_y) * NodeLL(_y,_x) ~~> | Garbage 
where 
   _x,_y notincontext



/*************** End Junk Rules *******************/


/*************** Abs1 Rule *******************/
abstraction ls_ls:
 | ls(?x,_x) * ls(_x,nil()) ~~> |  ls(?x,nil()) 
where 
  _x notincontext;
  _x notin ?x



abstraction ls_pto:
 | ls(?x,_x) * NodeLL(_x,nil()) ~~>  | ls(?x,nil()) 
where 
  _x notincontext;
  _x notin ?x



abstraction pto_ls:
 | NodeLL(?x,_x) * ls(_x,nil()) ~~> | ls(?x,nil()) 
where 
  _x notincontext;
  _x notin ?x



abstraction pto_pto:
 | NodeLL(?x,_x) * NodeLL(_x,nil()) ~~> | ls(?x,nil())
where 
  _x notincontext;
  _x notin ?x


  
/*************** End Abs1 Rule *******************/



/*************** Abs2 Rule *******************/
abstraction ls_ls_ls:
 | ls(?x,_x) * ls(_x,?y) * ls(?y,?z) ~~> | ls(?x,?y) * ls(?y,?z) 
where 
  _x notincontext;
  _x notin ?x;
  _x notin ?y;
  _x notin ?z



abstraction ls_ls_pto:
 | ls(?x,_x) * ls(_x,?y) * NodeLL(?y,?z) ~~> | ls(?x,?y) * NodeLL(?y,?z) 
where 
  _x notincontext;
  _x notin ?x;
  _x notin ?y;
  _x notin ?z



abstraction ls_pto_ls:
 | ls(?x,_x) * NodeLL(_x,?y) * ls(?y,?z) ~~> | ls(?x,?y) * ls(?y,?z)
where 
    _x notincontext;
  _x notin ?x;
  _x notin ?y;
  _x notin ?z




abstraction ls_pto_pto:
 | ls(?x,_x) * NodeLL(_x,?y) * NodeLL(?y,?z) ~~> | ls(?x,?y) * NodeLL(?y,?z)
where 
  _x notincontext;
  _x notin ?x;
  _x notin ?y;
  _x notin ?z


abstraction pto_ls_ls:
 | NodeLL(?x,_x) * ls(_x,?y) * ls(?y,?z) ~~> | ls(?x,?y)  * ls(?y,?z) 
where 
  _x notincontext;
  _x notin ?x;
  _x notin ?y;
  _x notin ?z



abstraction pto_ls_pto:
 | NodeLL(?x,_x) * ls(_x,?y) * NodeLL(?y,?z) ~~> | ls(?x,?y)  * NodeLL(?y,?z)
where 
  _x notincontext;
  _x notin ?x;
  _x notin ?y;
  _x notin ?z



abstraction pto_pto_ls:
 | NodeLL(?x,_x) * NodeLL(_x,?y) * ls(?y,?z) ~~> | ls(?x,?y) * ls(?y,?z) 
where 
  _x notincontext;
  _x notin ?x;
  _x notin ?y;
  _x notin ?z




abstraction pto_pto_pto:
 | NodeLL(?x,_x) * NodeLL(_x,?y) * NodeLL(?y,?z) ~~> | ls(?x,?y) * NodeLL(?y,?z) 
where 
  _x notincontext;
  _x notin ?x;
  _x notin ?y;
  _x notin ?z



/*************************************
 *  Empty rules
 ***********************************
rule NodeLL_nil2:
NodeLL(nil(),?x) | | |- | 
if

rule NodeLL_not_nil:
NodeLL(?x,?y) | ?x!=nil() | |- |
if
| | |- |

rule NodeLL_not_eq:
NodeLL(?x,?y) * NodeLL(?z,?w) | ?x!=?z | |- |
if
| | |- |
*/
/*************** End Abs2 Rule *******************/
