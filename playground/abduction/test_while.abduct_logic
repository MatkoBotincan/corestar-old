import "field_abduct_logic";


/***************************************
 *  This file defines 
 *
 *  NodeLL
 *  ls
 *  lspe
 *
 ***************************************/



rule NodeLL_not_nil:
  NodeLL(nil(),?y) | | |- |
if

rule ls_not_nil:
  ls(nil(),?y) | | |- |
if

rule lspe_not_nil:
  lspe(nil(),?y) | | |- |
if
  | ?y=nil() | |- |


rule NodeLL_not_nil:
  NodeLL(?x,?y) | | |- ?x!=nil() |
if
  | | |- |

rule NodeLL_not_eq:
  NodeLL(?x,?y) * NodeLL(?x,?w) | | |- |
if




/*************************************
 * Rule for unpacking Nodell 
 *
 *  These rules could potentially cycle forever
 *  but due to their order cannot.
 *************************************/

//Unroll NodeLL if we are looking for its next field
rule field_remove1a:
  |   NodeLL(?x,?e1) |-  field(?x,"<NodeLL: next>",?e2) 
if
  field(?x,"<NodeLL: next>",?e1) | | field(?x,"<NodeLL: content>",_w) 
     |-  ?e1=?e2 

//Unroll NodeLL if we are looking for its content field
rule field_remove1b:
  | |  NodeLL(?x,?e1) |- | field(?x,"<NodeLL: content>",?e2) 
if
  field(?x,"<NodeLL: content>",w) | |  field(?x,"<NodeLL: next>",?e1)
     |-  w=?e2 |


//Roll up a complete NodeLL if we have both fields.
rule field_remove2:
  | | field(?x,"<NodeLL: next>",?e1) * field(?x,"<NodeLL: content>",?z) |- | 
if
  | | NodeLL(?x,?e1) |- |  





/*************************************
 * Simple subtraction rules 
 *************************************/


rule ls_unroll_exists :
| | ls(?x,?y) |- | field(?x,?w,?Z)
if
| | NodeLL(?x,_fooz) * lspe(_fooz,?y)  |- | field(?x,?w,?Z)



rule ls_ls_match :
  ls(?z,?w) | | ls(?x,?y) |- | ls(?x,?z)
if
  ls(?x,?y) | | |- | lspe(?y,?z)

rule ls_NodeLL_match :
  NodeLL(?z,?w) | | ls(?x,?y) |- | ls(?x,?z)
if
  ls(?x,?y) | | |- | lspe(?y,?z)

rule ls_field_match :
  field(?z,?f,?w) | | ls(?x,?y) |- | ls(?x,?z)
if
  ls(?x,?y) | | |- | lspe(?y,?z)



rule nl_ls_match :
  ls(?z,?w) | | NodeLL(?x,?y) |- | ls(?x,?z)
if
  NodeLL(?x,?y) | | |- | lspe(?y,?z)

rule nl_NodeLL_match :
  NodeLL(?z,?w) | | NodeLL(?x,?y) |- | ls(?x,?z)
if
  NodeLL(?x,?y) | | |- | lspe(?y,?z)

rule nl_field_match :
  field(?z,?f,?w) | | NodeLL(?x,?y) |- | ls(?x,?z)
if
  ls(?x,?y) | | |- | lspe(?y,?z)




rule lspe_left :
  | | lspe(?x,?y) |- | 
if
  | | ls(?x,?y) |- |
or
  | ?x=?y | |- | 


rule lspe_right :
  | | |- | lspe(?x,?y) 
if
  | | |- | ls(?x,?y) 
or
  | | |- ?x=?y | 


/*************************************
 * rules for contradictions 
 *************************************/
rule ls_field_contradiction1 :
ls(?x,?t) * field(?x,"<NodeLL: next>",?z) | | |- | 
if

rule ls_field_contradiction2 :
ls(?x,?t) * field(?x,"<NodeLL: content>",?z) | | |- | 
if

rule ls_node_contradiction :
ls(?x,?t) * NodeLL(?x,?z) | | |- | 
if

rule ls_ls_contr :
ls(?x,?t) * ls(?x,?z) | | |- |
if

rule ls_ls_contr :
 | | |- | ls(?x,?t) * ls(?x,?z)
if
 | | |- x!=x |

 
  
/**************************************
 *  Abduction of list
 **************************************/  
/*
rule abduct_list :
  | |- ls(?x,nil()) -|
without
  field(?x,?f,?y)
if
  | |- -| ls(?x,nil())
*/

/*  
rule rearrange1:
  | ?x=?p * ls(?x,nil()) |-
without
  ?x != ?p
if
  | ls(?p,?x) * ls(?x,nil()) |-
*/
