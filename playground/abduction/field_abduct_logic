/*************************************
 * Simple subtraction rules 
 *************************************/

/*
  If you have a field for the same object 
  on both sides of an implication, add the 
  field to the matched fields, and require 
  that proof obligation that there values 
  are the same.  

  The "without" clause prevents the matching
  if we already know the fields have different 
  values.  
 */
rule field_remove1:
| field(?x,?f,?y) |-  field(?x,?f,?t) 
without
  ?y!=?t
if
  field(?x,?f,?y) | |- ?y=?t 


/*************************************
 * rules for contradictions 
 *************************************/

/*
  If two fields for the same object with the 
  same name exists in an assumption, then there
  is a contradiction and the proof is complete.
 */ 
rule field_field_contradiction1 :
  field(?x,?f,?y) * field(?x,?f,?z) | |- 
if

/*
  If we have an assumption of a field for null
  then we have a contradiction.
 */
rule field_nil_contradiction : 
  field(nil(),?f,?z) | |- 
if

/**************************************
 *  Rules for failed proofs
 **************************************/

/*
  If we need to prove that field exists for null
  then we are going to fail, unless we can find 
  a contradiction.
 */
rule field_nil_failed :
  | |- field(nil(),?f,?z) 
if
  | |- field(nil(),?f,?z) * False

/*
  If we need to match to fields which have 
  distinct values, then we need to search for a 
  contradiction (False).
 */
/*
rule field_field_no_match : 
  | ?y!=?t * field(?x,?f,?y) |-  field(?x,?f,?t) 
if
  | ?y!=?t * field(?x,?f,?y) |-  field(?x,?f,?t) * False
*/


rule field_not_null :
  field(?x,?f,?y) | |- ?x!=nil() 
if
  | |-


/**************************************
 *  Abduction of fields
 **************************************/  
rule abduct_field :
  | |- field(?x,?f,?y) -|
/*
without
  ls(?x,?z) || NodeLL(?x,?z) || lspe(?x,?z)
*/
if
  | |- -| field(?x,?f,?y)
