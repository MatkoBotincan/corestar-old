import "field_logic";
import "listdatatype_logic";
import "builtin_plus_logic";

rule dseg_empty_left2:
  || dseg(?i, ?ip, ?jn, ?j, empty()) |- |
if
  | ?i = ?jn * ?ip = ?j | |- |

rule dseg_empty_right1:
  || |- | dseg(?i, ?j, ?i, ?j, empty())
if
  || |- |

rule dseg_empty_right2:
  || |- | dseg(?i, ?ip, ?jn, ?j, empty())
if
  || |-  ?i = ?jn * ?j = ?ip |

rule dseg_ne_left:
  || dseg_ne(?i, ?ip, ?jn, ?j, ?l) |- |
without
  ?l = cons(?a, ?alpha)
if
  | ?l = cons(_a, _alpha) | dseg_ne(?i, ?ip, ?jn, ?j, ?l) |- |

rule dseg_cons_field_lookup_left:
  || dseg_ne(?i, ?ip, ?jn, ?j, cons(?a, ?alpha)) |- | field(?i, ?t, ?e)
if
  || dseg(_k, ?i, ?jn, ?j, ?alpha) * node(?i, ?ip, _k, ?a) |- | field(?i, ?t, ?e)

rule node_lookup_next:
  || node(?i,?ip,?in1,?e) |- | field(?i, "<java.util.LinkedList$Entry: java.util.LinkedList$Entry next>" ,?in2)
if
  field(?i, "<java.util.LinkedList$Entry: java.util.LinkedList$Entry next>", ?in1) ||
  field(?i, "<java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>", ?ip) *
  field(?i, "<java.util.LinkedList$Entry: java.lang.Object element>", ?e)
    |-  ?in1 = ?in2 |

rule dseg_node_rollup_left:
  || node(?i, ?ip, ?in, ?a) |- |
if
  || dseg_ne(?i, ?ip, ?in, ?i, cons(?a, empty())) |- |

rule node_rollup_left:
  || field(?i, "<java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>", ?ip) *
     field(?i, "<java.util.LinkedList$Entry: java.util.LinkedList$Entry next>", ?in) *
     field(?i, "<java.util.LinkedList$Entry: java.lang.Object element>", ?a) |- |
if
  || node(?i, ?ip, ?in, ?a) |- |

/** Length of a list (length). **/
rewrite app_cons_empty:
  app(cons(?a, empty()), ?alpha) = cons(?a, ?alpha)

rewrite length_empty:
  length(empty()) = numeric_const("0")

rewrite length_app:
  length(app(?alpha, ?beta)) = builtin_plus(length(?alpha), length(?beta))
without
  | (?beta = empty() |) || (?alpha = empty() |)

rewrite length_cons_empty:
  length(cons(?a, empty())) = numeric_const("1")

rewrite length_cons:
  length(cons(?a, ?alpha)) = builtin_plus(numeric_const("1"), length(?alpha))
without
  ?alpha = empty()

rule length_cons_not_zero_right:
  || |- length(cons(?a, ?alpha)) = numeric_const("0") |
if
  || |- | False

rule le_length_cons_zero_left:
  | LE(length(cons(?a, ?alpha)), numeric_const("0")) | |- |
if

rule lt_zero_length_right:
  || |- LT(numeric_const("0"), length(cons(?a, ?alpha))) |
if
  || |- |

rule le_zero_length_left:
  | LT(numeric_const("0"), length(cons(?a, ?alpha))) | |- |
if
  || |- |

rule lt_length_cons_zero_left:
  | LT(length(?alpha), numeric_const("0")) | |- |
if

rule lt_zero_length_right:
  || |- LT(length(?alpha), numeric_const("0")) |
if
  || |- | False

rewrite plus_0_second:
  builtin_plus(numeric_const(?x), numeric_const("0")) = numeric_const(?x)

rewrite plus_0_first:
  builtin_plus(numeric_const("0"), numeric_const(?x)) = numeric_const(?x)

rule ge_le_left:
  | GE(?a, ?b) | |- |
if
  | LE(?b, ?a) | |- |

rule le_reflexivity_left:
  | LE(?a, ?a) | |- |
if
  || |- |

rule le_one_zero_left:
  | LE(numeric_const("1"), numeric_const("0")) | |- |
if

rule le_plus_plus_first_left:
  | LE(builtin_plus(?a, ?b), builtin_plus(?a, ?c)) | |- |
if
  | LE(?b, ?c) | |- |

rule le_plus_first_eq1_left:
  | LE(builtin_plus(?a, ?b), ?a) | |- |
if
  | LE(?b, numeric_const("0")) | |- |

rule lt_plus_plus_first_left:
  | LT(builtin_plus(?a, ?b), builtin_plus(?a, ?c)) | |- |
if
  | LT(?b, ?c) | |- |

rewrite shiftr_one_one:
  builtin_shiftr(numeric_const("1"), numeric_const("1")) = numeric_const("0")

rule dseg_disj_left:
  || dseg(?i, ?ip, ?jn, ?j, ?alpha) |- |
without
  | (?alpha = empty() |) || (?alpha = cons(?b, ?beta) |)
if
  || (?alpha = empty() | dseg(?i, ?ip, ?jn, ?j, ?alpha)) ||
     ( | dseg_ne(?i, ?ip, ?jn, ?j, ?alpha)) |- |

