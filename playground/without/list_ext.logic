/**
 * Extends list logic.
 **/

/*
  Identity: (a::alpha) @ beta = a::(alpha @ beta).

  The rewrite rule pushes applications to deeper nesting levels.
*/
rewrite app_cons:
  app(cons(?a, ?alpha), ?beta) = cons(?a, app(?alpha, ?beta))
without
     app(cons(?a, ?alpha), ?beta) = cons(?a, ?alpha)
  || app(cons(?a, ?alpha), ?beta) = cons(?a,  ?beta)
  || app(cons(?a, ?alpha), ?beta) = cons(?a, app(?alpha, ?beta))
  || app(cons(?a, ?alpha), ?beta) = ?alpha
  || app(cons(?a, ?alpha), ?beta) = ?beta

rule cons_contradication:
  | cons(?a, ?alpha) = ?alpha |-
if

/*
  Contradiction.

  If we have (a::alpha) @ beta = alpha, then we have a contradiction (since
  a::beta is non-empty) and we are done.
*/
/*
rule app_cons_first_contradiction_left:
  | app(cons(?a, ?alpha), ?beta) = ?alpha |-
if
*/
/*
  Associativity Rule.
  Identity: (alpha @ beta) @ gamma = alpha @ (beta @ gamma).

  Move appends to the right. Side conditions prevent the application of the
  rule in the trivial when one of the sub-lists is empty. In the trivial case,
  the terms should be simplified by the rules app_nil_1 and app_nil_2.
*/
rewrite app_assoc:
  app(app(?alpha, ?beta), ?gamma) = app(?alpha, app(?beta, ?gamma))
without
     ?alpha = empty()
  || ?beta  = empty()
  || ?gamma = empty()
  || app(app(?alpha, ?beta), ?gamma) = app(?alpha, ?beta)
  || app(app(?alpha, ?beta), ?gamma) = app(?alpha, ?gamma)
  || app(app(?alpha, ?beta), ?gamma) = app(?beta,  ?gamma)
  || app(app(?alpha, ?beta), ?gamma) = ?alpha
  || app(app(?alpha, ?beta), ?gamma) = ?beta
  || app(app(?alpha, ?beta), ?gamma) = ?gamma

