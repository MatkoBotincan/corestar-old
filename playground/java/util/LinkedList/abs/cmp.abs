abstraction gt_lt_abs:
  (?a > ?b) ~~> (?b < ?a)

abstraction ge_le_abs:
  (?a >= ?b) ~~> (?b <= ?a)

abstraction le_reflexivity_abs:
  (?a <= ?a) ~~>

abstraction lt_ex_first_abs:
  (_x < ?y) ~~>
where
  _x notincontext

abstraction lt_ex_second_abs:
  (?x < _y) ~~>
where
  _y notincontext

abstraction lt_ex_first_abs:
  (numeric_const(_x) < ?y)
~~>
  (numeric_const("0") < ?y)
where
  _x notincontext

abstraction lt_ex_num_second_abs:
  (?x < numeric_const(_y)) ~~>
where
  _y notincontext

abstraction le_ex_first_abs:
  (_x <= ?y) ~~>
where
  _x notincontext

abstraction le_ex_second_abs:
  (?x <= _y) ~~>
where
  _y notincontext

abstraction le_ex_num_first_abs:
  (numeric_const(_x) <= ?y)
~~>
  (numeric_const("0") <= ?y)
where
  _x notincontext

abstraction le_ex_num_second_abs:
  (?x <= numeric_const(_y)) ~~>
where
  _y notincontext

abstraction lt_ex_plus_one_abs:
  ((numeric_const("1") + _x) < ?y) ~~>
where
  _x notincontext

abstraction lt_num_ex_plus_one_abs:
  ((numeric_const("1") + numeric_const(_x)) < ?y)
~~>
  (numeric_const("1") < ?y)
where
  _x notincontext

















/*
  Antisymmetry of the "<=" relation:
      a <= b /\ b <= a
  <=> a = b.
*/
abstraction le_antisymmetry:
  (?a <= ?b) * (?b <= ?a)
~~>
  ?a = ?b

/*
  True statement.
    0 <= n <=> True,
      where n is a non-negative integer constant.
*/
abstraction le_zero_n:
  (numeric_const("0") <= numeric_const(?n))
~~>

/*
  Equivalence.
      n <= 0
  <=> n = 0, where n is a non-negative integer constant.
*/
abstraction le_one_zero:
  (numeric_const(?n) <= numeric_const("0"))
~~>
  ?n = "0"

/*
  Equivalence.
      a + b <= a + c
  <=> b <= c.
*/
abstraction le_plus_plus_first_first:
  ((?a + ?b) <= (?a + ?c))
~~>
  (?b <= ?c)

/*
  Equivalence.
      b + a <= c + a
  <=> b <= c.
*/
abstraction le_plus_plus_second_second:
  ((?b + ?a) <= (?c + ?a))
~~>
  (?b <= ?c)

/*
  Equivalence.
      a + b <= c + a
  <=> b <= c.
*/
abstraction le_plus_plus_first_second:
  ((?a + ?b) <= (?c + ?a))
~~>
  (?b <= ?c)

/*
  Equivalence.
      b + a <= a + c
  <=> b <= c.
*/
abstraction le_plus_plus_second_first:
  ((?b + ?a) <= (?a + ?c))
~~>
  (?b <= ?c)

/*
  Equivalence.
      a + b <= a
  <=> b <= 0.
*/
abstraction le_plus_first_eq1:
  ((?a + ?b) <= ?a)
~~>
  (?b <= numeric_const("0"))

/*
  Equivalence.
      a + b <= b
  <=> a <= 0.
*/
abstraction le_plus_first_eq2:
  ((?a + ?b) <= ?b)
~~>
  (?a <= numeric_const("0"))

/*
  Equivalence.
      a <= a + b
  <=> b <= 0.
*/
abstraction le_plus_second_eq1:
  (?a <= (?a + ?b))
~~>
  (numeric_const("0") <= ?b)

/*
  Equivalence.
      a + b <= b
  <=> a <= 0.
*/
abstraction le_plus_second_eq2:
  (?b <= (?a + ?b))
~~>
  (numeric_const("0") <= ?a)

/*
  Equivalence:
      a + b < a + c
  <=> b < c.
*/
abstraction lt_plus_plus_first_first_rem:
  (?b < ?c) * ((?a + ?b) < (?a + ?c))
~~>
  (?b < ?c)

abstraction lt_plus_plus_first_first:
  ((?a + ?b) < (?a + ?c))
~~>
  (?b < ?c)

/*
  Equivalence:
      a + b < c + a
  <=> b < c.
*/
abstraction lt_plus_plus_first_second_rem:
  (?b < ?c) * ((?a + ?b) < (?c + ?a))
~~>
  (?b < ?c)

abstraction lt_plus_plus_first_second:
  ((?a + ?b) < (?c + ?a))
~~>
  (?b < ?c)

/*
  Equivalence:
      b + a < a + c
  <=> b < c.
*/
abstraction lt_plus_plus_second_first:
  ((?b + ?a) < (?a + ?c))
~~>
  (?b < ?c)

/*
  Equivalence:
      b + a < c + a
  <=> b < c.
*/
abstraction lt_plus_plus_second_second:
  ((?b + ?a) < (?c + ?a))
~~>
  (?b < ?c)

/*
  Equivalence:
      a + b < a
  <=> b < 0.
*/
abstraction lt_plus_first_eq1:
  ((?a + ?b) < ?a)
~~>
  (?b < numeric_const("0"))

/*
  Equivalence:
      a + b < b
  <=> a < 0.
*/
abstraction lt_plus_first_eq2:
  ((?a + ?b) < ?b)
~~>
  (?a < numeric_const("0"))

/*
  Equivalence:
      a < a + b
  <=> 0 < b.
*/
abstraction lt_plus_second_eq1:
  (?a < (?a + ?b))
~~>
  (numeric_const("0") < ?b)

/*
  Equivalence on LHS:
      b < a + b
  <=> 0 < a.
*/
abstraction lt_plus_second_eq2:
  (?b < (?a + ?b))
~~>
  (numeric_const("0") < ?a)

/*
  Equivalence.
      a <= b /\ b < 1 + a
  <=> a = b,
  where a, b are integers.
*/
abstraction le_lt_eq:
  (?a <= ?b) * (?b < (numeric_const("1") + ?a))
~~>
  ?a = ?b

abstraction le_lt_eq:
  (?b < (numeric_const("1") + ?a)) * (?a <= ?b)
~~>
  ?a = ?b

/*
  Equivalence.
      0 < n
  <=> n != 0, where n is a positive integer constant.
*/
abstraction lt_zero_one:
  (numeric_const("0") < numeric_const(?n))
~~>
  ?n != "0"

/*
  Equivalence.
       1 + x <= y
  <=>  x < y, where n is a non-negative integer constant.
*/
abstraction le_plus_one_eq_lt:
  ((numeric_const("1") + ?x) <= ?y)
~~>
  (?x < ?y)

/*
  Equivalence.
      x <= y /\ x < y
  <=> x < y.
*/
abstraction lt_le_redundancy:
  (?x < ?y) * (?x <= ?y)
~~>
  (?x < ?y)

abstraction lt_neq:
  (?a < ?b) * ?a != ?b
~~>
  (?a < ?b)

/*
  Implication:
      n + x < y
  =>  x < y, where n is a non-negative integer.
*/
abstraction lt_plus_lt:
  ((numeric_const(?n) + ?x) < ?y) * (?x < ?y)
~~>
  ((numeric_const(?n) + ?x) < ?y)

/*
  Implication:
      n + x < y
  =>  x <= y, where n is a non-negative integer.
*/
abstraction lt_plus_le:
  ((numeric_const(?n) + ?x) < ?y) * (?x <= ?y)
~~>
  ((numeric_const(?n) + ?x) < ?y)

/*
  Implication:
      n + x <= y
  =>  x <= y, where n is a non-negative integer.
*/
abstraction le_plus_le:
  ((numeric_const(?n) + ?x) <= ?y) * (?x <= ?y)
~~>
  ((numeric_const(?n) + ?x) <= ?y)

/*
  Implication:
      x < y
  =>  x < n + y, where n is a non-negative integer.
*/
abstraction lt_lt_plus:
  (?x < ?y) * (?x < (numeric_const(?n) + ?y))
~~>
  (?x < ?y)

/*
  Implication:
      x < y
  =>  x <= n + y, where n is a non-negative integer.
*/
abstraction lt_le_plus:
  (?x < ?y) * (?x <= (numeric_const(?n) + ?y))
~~>
  (?x < ?y)

/*
  Implication:
      x <= y
  =>  x <= n + y, where n is a non-negative integer.
*/
abstraction le_le_plus:
  (?x <= ?y) * (?x <= (numeric_const(?n) + ?y))
~~>
  (?x <= ?y)

/*abstraction le_disj:
  (?a <= ?b) <=> ?a = ?b || (?a < ?b)
*/
/*rule lt_transitivity_left:
  | (?a < ?b) |-
if
  | ?b = (numeric_const("1") + _c) * (?a <= _c) |-*/








abstraction lt_lt_ex:
  (?a < _x) * (?b < _x) ~~>
where
  _x notincontext

abstraction lt_le_ex:
  (?a < _x) * (?b <= _x) ~~>
where
  _x notincontext

abstraction le_le_ex:
  (?a <= _x) * (?b <= _x) ~~>
where
  _x notincontext

abstraction lt_lt_num_ex:
  (?a < numeric_const(_x)) * (?b < numeric_const(_x)) ~~>
where
  _x notincontext

abstraction lt_le_num_ex:
  (?a < numeric_const(_x)) * (?b <= numeric_const(_x)) ~~>
where
  _x notincontext

abstraction le_le_num_ex:
  (?a <= numeric_const(_x)) * (?b <= numeric_const(_x)) ~~>
where
  _x notincontext

