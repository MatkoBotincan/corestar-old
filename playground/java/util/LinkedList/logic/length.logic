/*********************
 * Length of a list. *
 *********************/

/**
 * (Inductive) Definition of the length of list.
 */

/*
  Length of the empty list.

  The empty list [] has length zero.
*/
rewrite length_empty*:
  length(empty()) = numeric_const("0")

/*
  Length of a list that consists of two lists concatenated together.

  The length of list alpha @ beta is the sum of the lengths of its two
  sub-lists alpha and beta.
*/
rewrite length_app*:
  length(app(?alpha, ?beta)) = (length(?alpha) + length(?beta))
without
  length(app(?alpha, ?beta)) = (?x + ?y)

/*
  Length of a singleton list.

  The length of a list a::[] is one. (Strictly speaking, this rule is redundant
  since the rules length_cons and length_empty can be used to infer this rule.)
*/
rewrite length_cons_empty*:
  length(cons(?a, empty())) = numeric_const("1")

/*
  Length of a list that consists of a first element and a remaining list.

  The length of a list a::alpha is one plus the length of alpha.
*/
rewrite length_cons*:
  length(cons(?a, ?alpha)) = (numeric_const("1") + length(?alpha))

/**
 * Contradictions.
 */

/*
  Contradiction.

  The range of the length function is the natural numbers. Hence,
  length(alpha) >= 0 for all alpha and consequently the sum of length of a
  list alpha and one is at least one and cannot be zero.
*/
equiv length_plus_one_eq_zero:
  (numeric_const("1") + length(?alpha)) = numeric_const("0") <=> False

/*
  Contradiction.

  A list that has a first element is non-empty therefore its length cannot be zero.
*/
equiv length_cons_eq_zero:
  length(cons(?a, ?alpha)) = numeric_const("0") <=> False

/*
rule length_zero_app_left:
  | length(app(?alpha, ?beta)) = numeric_const("0") |- 
if
  | length(?alpha) = numeric_const("0") * length(?beta) = numeric_const("0") |- 
*/

equiv length_app_empty_first:
  length(app(?alpha, ?beta)) = length(?alpha) <=> ?beta = empty()
without
  ?beta = empty()

equiv length_app_empty_second:
  length(app(?alpha, ?beta)) = length(?beta) <=> ?alpha = empty()
without
  ?alpha = empty()

