/***************************************
 * Doubly-linked list segments (dseg). *
 ***************************************/

/* Include type information? */

/*
  dseg(i, ip, jn, j, ls):

       +----+       +----+         +----+
  i -->| a1 |<-. .->| a2 |<- ... ->| an |<-- j
       +----+   X   +----+         +----+
       | __ |__/ \  | __ |   ...   | jn |-->
       +----+     \ +----+ /     \ +----+
    <--| ip |      \| __ |/       \| __ |
       +----+       +----+         +----+

  ls = [a1, a2, ..., an]

  Argument "i" is a field pointing to the first node of the list segment, "j"
  points to the last node.
  The fields "ip" is the previous pointer of the first node (pointed to by i) and
  similarly "jn" is the next pointer of the last node (pointed to by j).
  The argument ls is a list of the elements represented by the predicate.

  Inductive definition:
    dseg(i, ip, jn, j, empty()) := emp /\ i = jn /\ j = ip

    dseg(i, ip, jn, j, cons(a, alpha)) :=
      i.<Entry: Entry prev> |-> ip *
      i.<Entry: Entry next> |-> _in *
      i.<Entry: Object element> |-> a *
      dseg(_in ,i ,jn ,j ,alpha)

  The dseg_ne predicate defines a non-empty list segment (i != jn and j != ip).
  Furthermore, dseg and dseg_ne describe non-touching (non-circular) list
  segments.
*/

/**
 * Empty list segment.
 */

/*
  Equivalence (definition of empty list segment).
*/
equiv dseg_empty1:
  dseg(?i, ?j, ?i, ?j, ?ls) <=> ?ls = empty()

/*
  Equivalence (definition of empty list segment).
*/
equiv dseg_empty2:
  dseg(?i, ?ip, ?jn, ?j, empty()) <=> ?i = ?jn * ?ip = ?j

/**
 * Contradictions: a list segment given by dseg_ne must not be empty.
 */

/*
  Contradiction (dseg_ne describes non-empty list segement).
*/
equiv dseg_ne_empty1:
  dseg_ne(?i, ?ip, ?jn, ?j, ?l) => ?i = ?jn <=> False

/*
  Contradiction (dseg_ne describes non-empty list segement).
*/
equiv dseg_ne_empty2:
  dseg_ne(?i, ?ip, ?jn, ?j, ?l) => ?j = ?ip <=> False

/*
  Contradiction (dseg_ne describes non-empty list segement).
  (FIXME: Hopefully redundant in future.)
*/
equiv dseg_ne_empty3:
  ?i = ?jn => dseg_ne(?i, ?ip, ?jn, ?j, ?l) <=> False

/*
  Contradiction (dseg_ne describes non-empty list segement).
  (FIXME: Hopefully redundant in future.)
*/
equiv dseg_ne_empty4:
  ?j = ?ip => dseg_ne(?i, ?ip, ?jn, ?j, ?l) <=> False

/*
  Contradiction (dseg_ne describes non-empty list segement).
*/
equiv dseg_ne_empty5:
  dseg_ne(?i, ?ip, ?i, ?j, ?l) <=> False

/*
  Contradiction (dseg_ne describes non-empty list segement).
*/
equiv dseg_ne_empty6:
  dseg_ne(?i, ?j, ?jn, ?j, ?l) <=> False

/*
  Contradiction.
    A heap cannot split into two part containing the same field.
*/
equiv dseg_dseg_contradiction1:
  dseg_ne(?i, ?ip, ?jn, ?j, ?l1) * dseg_ne(?i, ?kp, ?mn, ?m, ?l2) <=> False

equiv dseg_dseg_contradiction2:
      dseg_ne(?i, ?ip, ?jn, ?j, ?l1) * dseg_ne(?k, ?kp, ?mn, ?m, ?l2)
  =>  ?i = ?k <=> False

/**
 * List segments are non-touching!
 */

/*
  Contradiction (list segments are non-touching).
    dseg_ne is a predicate defining non-touching list segments and thus,
    the pointer to the first node is not allowed to be the same a the
    pointer to the previous node (in front of the list).
*/
equiv dseg_non_circular_front1:
  dseg_ne(?i, ?ip, ?jn, ?j, ?l) => ?i = ?ip <=> False

/*
  Contradiction (list segments are non-touching).
    The pointer to the last node, j, must not coincide with the pointer to the
    next node (which comes after the list segment).
*/
equiv dseg_non_circular_back1:
  dseg_ne(?i, ?ip, ?jn, ?j, ?l) => ?j = ?jn <=> False

/*
  Contradiction (list segments are non-touching).
    Variant of the dseg_non_circular_front1 rule.
*/
equiv dseg_non_circular_front2:
  ?i = ?ip => dseg_ne(?i, ?ip, ?jn, ?j, ?l) <=> False

/*
  Contradiction (list segments are non-touching).
    Variant of the dseg_non_circular_back1 rule.
*/
equiv dseg_non_circular_back2:
  ?j = ?jp => dseg_ne(?i, ?ip, ?jn, ?j, ?l) <=> False

/*
  Contradiction (list segments are non-touching).
    Variant of the dseg_non_circular_front1 rule.
*/
equiv dseg_non_circular_front3:
  dseg_ne(?i, ?i, ?jn, ?j, ?l) <=> False

/*
  Contradiction (list segments are non-touching).
    Variant of the dseg_non_circular_back1 rule.
*/
equiv dseg_non_circular_back3:
  dseg_ne(?i, ?ip, ?j, ?j, ?l) <=> False

/*
  Equivalence.
    If a list contains only one element, then the first and the last node are
    the same.
    Side condition prevents repeated application of the rule.
*/
equiv dseg_singleton:
      dseg_ne(?i, ?ip, ?jn, ?j, cons(?a, empty()))
  <=> ?i = ?j * dseg_ne(?i, ?ip, ?jn, ?j, cons(?a, empty()))
without
  ?i = ?j

/** Doubly-linked list segments (dseg). **/

/*
  Equivalence.
   All non-empty "dseg" list segements are converted to "dseg_ne" list segments.
*/
equiv dseg_non_empty1:
  ?i != ?jn => dseg(?i, ?ip, ?jn, ?j, ?l) <=> dseg_ne(?i, ?ip, ?jn, ?j, ?l)

equiv dseg_non_empty2:
  ?j != ?ip => dseg(?i, ?ip, ?jn, ?j, ?l) <=> dseg_ne(?i, ?ip, ?jn, ?j, ?l)

equiv dseg_non_empty3:
      dseg(?i, ?ip, ?jn, ?j, cons(?a, ?alpha))
  <=> dseg_ne(?i, ?ip, ?jn, ?j, cons(?a, ?alpha))

equiv dseg_non_empty_app_cons_first:
      dseg(?i, ?ip, ?jn, ?j, app(cons(?a, ?alpha), ?beta))
  <=> dseg_ne(?i, ?ip, ?jn, ?j, app(cons(?a, ?alpha), ?beta))

equiv dseg_non_empty_app_cons_second:
      dseg(?i, ?ip, ?jn, ?j, app(?alpha, cons(?b, ?beta)))
  <=> dseg_ne(?i, ?ip, ?jn, ?j, app(?alpha, cons(?b, ?beta)))

/** List concatenation (app). **/

/** Expand list segment when neccessary. **/

/*
  Equality of non-empty list segments.

  If non-empty list segments with the same first node appear on both sides of
  the entailment, we split the RHS segment into tail and head according to the
  inductive case of the "dseg" definition.
*/
rule dseg_cons_expand:
  | dseg_ne(?i, ?ip, ?jn, j, cons(?a, ?alpha))
    |- dseg_ne(?i, ?ip2, ?jn2, ?j2, cons(?a2, ?alpha2))
if
  | dseg_ne(?i, ?ip, ?jn, j, cons(?a, ?alpha))
    |- node(?i, ?ip2, _m2, ?a2) * dseg(_m2, ?i, ?jn2, ?j2, ?alpha2)

/*rule dseg_app_expand:
  | dseg_ne(?i, ?ip, ?jn, j, app(?alpha, ?beta)) |- dseg_ne(?i, ?ip2, ?jn2, ?j2, cons(?alpha, ?alpha2))
if
  | dseg_ne(?i, ?ip, ?jn, j, cons(?a, ?alpha))
    |- node(?i, ?ip2, _m2, ?a2) * dseg(_m2, ?i, ?jn2, ?j2, ?alpha2)*/

/*
  Equality of list segment nodes.

  If the RHS contains a node of a LHS list segment, we expand the node on the
  RHS into its constituent fields. Afterwards the rules dseg_cons_field_lookup
  can be applied.
*/
rule dseg_node_lookup_first:
  | dseg_ne(?i, ?ip, ?jn, ?j, ?alpha) |- node(?i, ?ip2, ?in2, ?a2)
if
  | dseg_ne(?i, ?ip, ?jn, ?j, ?alpha)
    |- ?i.<java.util.LinkedList$Entry: java.util.LinkedList$Entry previous> |-> ?ip2 *
       ?i.<java.util.LinkedList$Entry: java.util.LinkedList$Entry next> |-> ?in2 *
       ?i.<java.util.LinkedList$Entry: java.lang.Object element> |-> ?a2

/*
  Equality of list segment nodes.

  Same as dseg_node_lookup_first but for the last node of the list segment.
*/
rule dseg_node_lookup_last:
  | dseg_ne(?i, ?ip, ?jn, ?j, ?alpha) |- node(?j, ?jp2, ?jn2, ?a2)
if
  | dseg_ne(?i, ?ip, ?jn, ?j, ?alpha)
    |- ?j.<java.util.LinkedList$Entry: java.util.LinkedList$Entry previous> |-> ?jp2 *
       ?j.<java.util.LinkedList$Entry: java.util.LinkedList$Entry next> |-> ?jn2 *
       ?j.<java.util.LinkedList$Entry: java.lang.Object element> |-> ?a2

/*
  If we have a field on the RHS of the first node in a non_empty list segment
  on the LHS, we expand the list segment on the LHS.
*/
rule dseg_cons_field_lookup:
  | dseg_ne(?i, ?ip, ?jn, ?j, ?l) |- /*?i.?t |-> ?e*/ field(?i, ?t, ?e)
if
  | ?l = cons(?a, ?alpha) * dseg(_k, ?i, ?jn, ?j, ?alpha) * node(?i, ?ip, _k, ?a)
    |- /*?i.?t |-> ?e*/ field(?i, ?t, ?e)

  /** Last element **/

/*
  Same as dseg_cons_field_lookup but for the last node of the list segment.
*/
rule dseg_app_lookup:
  | dseg_ne(?i, ?ip, ?jn, ?j, ?l) |- /*?j.?t |-> ?e*/ field(?j, ?t, ?e)
if
  | ?l = app(?alpha, cons(?a, empty())) * dseg(?i, ?ip, ?j, _k, ?alpha) * node(?j, _k, ?jn, ?a)
    |- /*?j.?t |-> ?e*/ field(?j, ?t, ?e)

/*
  Expand node.

  If we have a node predicate on the LHS of an implication and the "previous"
  field of the node object appears on the RHS, then we rewrite the node in terms
  of its constituent fields.
*/
rule node_lookup_previous:
  | node(?i, ?ip1, ?in, ?e)
      |- ?i.<java.util.LinkedList$Entry: java.util.LinkedList$Entry previous> |-> ?ip2
if
  ?i.<java.util.LinkedList$Entry: java.util.LinkedList$Entry previous> |-> ?ip1 |
    ?i.<java.util.LinkedList$Entry: java.util.LinkedList$Entry next> |-> ?in *
    ?i.<java.util.LinkedList$Entry: java.lang.Object element> |-> ?e
      |- ?ip1 = ?ip2

/*
  Same as node_lookup_previous but for "next" field.
*/
rule node_lookup_next:
  | node(?i, ?ip, ?in1, ?e)
      |- ?i.<java.util.LinkedList$Entry: java.util.LinkedList$Entry next> |-> ?in2
if
  ?i.<java.util.LinkedList$Entry: java.util.LinkedList$Entry next> |-> ?in1 |
    ?i.<java.util.LinkedList$Entry: java.util.LinkedList$Entry previous> |-> ?ip *
    ?i.<java.util.LinkedList$Entry: java.lang.Object element> |-> ?e
      |- ?in1 = ?in2 

/*
  Same as node_lookup_previous but for "element" field.
*/
rule node_lookup_element:
  | node(?i, ?ip, ?in, ?e1)
      |- ?i.<java.util.LinkedList$Entry: java.lang.Object element> |-> ?e2
if
  ?i.<java.util.LinkedList$Entry: java.lang.Object element> |-> ?e1 |
    ?i.<java.util.LinkedList$Entry: java.util.LinkedList$Entry next> |-> ?in *
    ?i.<java.util.LinkedList$Entry: java.util.LinkedList$Entry previous> |-> ?ip
      |- ?e1 = ?e2 

/** Doubly-linked list nodes (node). **/

/*
  Contradiction.

  A node object cannot be null.
*/
equiv node_not_nil:
  node(nil(), ?ip, ?in, ?a) <=>  False

/*
  Contradiction.

  If two node with the same name exit (on the same side on the entailment),
  then we have a contradiction (see field_field_contradiction1 for comparison).
*/
equiv node_not_eq:
  node(?x, ?ip, ?in, ?a) * node(?x, ?jp, ?jn, ?b) <=> False

/*
  Collapse to node.

  If all fields of a node object are present on one side, we collapse them to
  the node predicate.
*/
rule node_rollup_left:
  | ?i.<java.util.LinkedList$Entry: java.util.LinkedList$Entry previous> |-> ?ip *
    ?i.<java.util.LinkedList$Entry: java.util.LinkedList$Entry next> |-> ?in *
    ?i.<java.util.LinkedList$Entry: java.lang.Object element> |-> ?a |- 
if
  | node(?i, ?ip, ?in, ?a) |-

/*
  Convert all nodes on LHS to singleton list segments.
*/
rule dseg_node_rollup_left:
  | node(?i, ?ip, ?in, ?a) |- 
if
  | dseg_ne(?i, ?ip, ?in, ?i, cons(?a, empty())) |- 

/*
  Substraction rules for list segments.
*/
rule dseg_app_rollup2:
  | dseg_ne(?i, ?ip, ?jn, ?j, ?alpha) * dseg_ne(?jn, ?j, ?kn, ?k, ?beta)
    |- dseg_ne(?i, ?ip, ?kn, ?k, ?list)
if
  dseg_ne(?i, ?ip, ?jn, ?j, ?alpha) * dseg_ne(?jn, ?j, ?kn, ?k, ?beta) |
    |- ?list = app(?alpha, ?beta)

rule dseg_app_rollup3:
  | dseg_ne(?i, ?ip, ?jn, ?j, ?alpha)
           * dseg_ne(?jn, ?j, ?ln, ?l, ?beta)
                    * dseg_ne(?ln, ?l, ?kn, ?k, ?gamma)
      |- dseg_ne(?i, ?ip, ?kn, ?k, ?list)
if
  dseg_ne(?i, ?ip, ?jn, ?j, ?alpha) *
  dseg_ne(?jn, ?j, ?ln, ?l, ?beta)  *
  dseg_ne(?ln, ?l, ?kn, ?k, ?gamma) |
      |- ?list = app(?alpha, app(?beta, ?gamma))

rule dseg_app_rollup_trans:
  | dseg_ne(?i, ?ip, ?jn, ?j, ?alpha)
           * dseg_ne(?jn, ?j, ?ln, ?l, ?beta)
                    * dseg_ne(?m, ?mp, ?kn, ?k, ?gamma)
      |- dseg_ne(?i, ?ip, ?kn, ?k, ?list)
if
  dseg_ne(?i, ?ip, ?ln, ?l, app(?alpha, ?beta)) |
    dseg_ne(?m, ?mp, ?kn, ?k, ?gamma)
      |- dseg_ne(?ln, ?l, ?kn, ?k, ?list) * ?list = app(app(?alpha, ?beta), ?delta)

/*
  Equality of list segments.

  If we have a non-empty list segment on the LHS and one on the RHS which
  coincide in the first and the last node, then the other arguments of the
  "dseg_ne" must also be the same in both.
*/
rule dseg_dseg_eq:
  | dseg_ne(?i, ?ip1, ?jn1, ?j, ?l1) |- dseg_ne(?i, ?ip2, ?jn2, ?j, ?l2)
if
  | dseg_ne(?i, ?ip1, ?jn1, ?j, ?l1) |- ?l1 = ?l2 * ?ip1 = ?ip2 * ?jn1 = ?jn2 

/*
  Equivalence.

  A list segment must be either empty or non-empty.
*/
equiv dseg_disj:
      dseg(?i, ?ip, ?jn, ?j, ?alpha)
  <=> ?alpha = empty() * ?i = ?jn * ?j = ?ip
        || dseg_ne(?i, ?ip, ?jn, ?j, ?alpha)

rule node_expand_right:
  | node(?i, ?ip1, ?in1, ?a1) |- node(?i, ?ip2, ?in2, ?a2)
if
  | node(?i, ?ip1, ?in1, ?a1)
    |- ?i.<java.util.LinkedList$Entry: java.util.LinkedList$Entry previous> |-> ?ip2 *
       ?i.<java.util.LinkedList$Entry: java.util.LinkedList$Entry next> |-> ?in2 *
       ?i.<java.util.LinkedList$Entry: java.lang.Object element> |-> ?a2

rule node_rollup_right:
  | |- ?i.<java.util.LinkedList$Entry: java.util.LinkedList$Entry previous> |-> ?ip *
       ?i.<java.util.LinkedList$Entry: java.util.LinkedList$Entry next> |-> ?in *
       ?i.<java.util.LinkedList$Entry: java.lang.Object element> |-> ?a
if
  | |- node(?i, ?ip, ?in, ?a)


