/***********************************
 * Rules for ">", ">=", "<", "<=". *
 ***********************************/

/**
 * Conversion rules between "<" and ">", and bewtween "<=" and ">=".
 */

/*
  Equivalence:
      a > b
  <=> b < a.

  ">" is the inverse relation of "<". Therefore we only provide logic to deal
  with "<" and rewrite all occurences of ">" in terms of "<".
*/
equiv gt_lt:
  (?a > ?b) <=> (?b < ?a)

/*
  Equivalence:
      a >= b
  <=> b <= a.

  ">=" is the inverse relation of "<=". Therefore we only provide logic to deal
  with "<=" and rewrite all occurences of ">=" in terms of "<=".
*/
equiv ge_le:
 (?a >= ?b) <=> (?b <= ?a)

/**
 * Reflexivity, Antisymmetry of "<=" relation.
 */

/*
  Reflexivity of the "<=" relation (LHS):
      a <= a
  <=> True.
*/
equiv le_reflexivity:
  => (?a <= ?a)

/*
  Antisymmetry of the "<=" relation:
      a <= b /\ b <= a
  <=> a = b.
*/
equiv le_antisymmetry:
  (?a <= ?b) => (?b <= ?a) <=> ?a = ?b

/*
  True statement.
    0 <= n <=> True,
      where n is a non-negative integer constant.
*/
equiv le_zero_n:
  => (numeric_const("0") <= numeric_const(?n))

/*
  Equivalence.
      n <= 0
  <=> n = 0, where n is a non-negative integer constant.
*/
equiv le_one_zero:
  (numeric_const(?n) <= numeric_const("0")) <=> ?n = "0"

/*
  Equivalence.
      a + b <= a + c
  <=> b <= c.
*/
equiv le_plus_plus_first_first:
  ((?a + ?b) <= (?a + ?c)) <=> (?b <= ?c)

/*
  Equivalence.
      b + a <= c + a
  <=> b <= c.
*/
equiv le_plus_plus_second_second:
  ((?b + ?a) <= (?c + ?a)) <=> (?b <= ?c)

/*
  Equivalence.
      a + b <= c + a
  <=> b <= c.
*/
equiv le_plus_plus_first_second:
  ((?a + ?b) <= (?c + ?a)) <=> (?b <= ?c)

/*
  Equivalence.
      b + a <= a + c
  <=> b <= c.
*/
equiv le_plus_plus_second_first:
  ((?b + ?a) <= (?a + ?c)) <=> (?b <= ?c)

/*
  Equivalence.
      a + b <= a
  <=> b <= 0.
*/
equiv le_plus_first_eq1:
  ((?a + ?b) <= ?a) <=> (?b <= numeric_const("0"))

/*
  Equivalence.
      a + b <= b
  <=> a <= 0.
*/
equiv le_plus_first_eq2:
  ((?a + ?b) <= ?b) <=> (?a <= numeric_const("0"))

/*
  Equivalence.
      a <= a + b
  <=> b <= 0.
*/
equiv le_plus_second_eq1:
  (?a <= (?a + ?b)) <=> (numeric_const("0") <= ?b)

/*
  Equivalence.
      a + b <= b
  <=> a <= 0.
*/
equiv le_plus_second_eq2:
  (?b <= (?a + ?b)) <=> (numeric_const("0") <= ?a)

/**
 * Irreflexivity, Asymmetry of "<" relation.
 */

/*
  Asymmetry of "<" relation:
      a < b /\ b < a
  <=> False.
*/
equiv lt_asymmetry:
  (?a < ?b) => (?b < ?a) <=> False

/*
  Variant on the asymmetry rule for "<":
      a < b /\ b <= a
  <=> False.

  If we have a < b, then a >= b (which is equivalent to b <= a) must
  necessarily be false.
*/
equiv lt_le_asymmetry:
  (?a < ?b) => (?b <= ?a) <=> False

equiv le_lt_asymmetry:
  (?a <= ?b) => (?b < ?a) <=> False

/*
  Irreflexivity of "<" relation:
      a < a
  <=> False.
*/
equiv lt_irreflexivity:
  (?a < ?a) <=> False

/*
  Equivalence:
      a + b < a + c
  <=> b < c.
*/
equiv lt_plus_plus_first_first_rem:
  (?b < ?c) => ((?a + ?b) < (?a + ?c))

equiv lt_plus_plus_first_first:
  ((?a + ?b) < (?a + ?c)) <=> (?b < ?c)
without
  (?b < ?c)

/*
  Equivalence:
      a + b < c + a
  <=> b < c.
*/
equiv lt_plus_plus_first_second_rem:
  (?b < ?c) => ((?a + ?b) < (?c + ?a))

equiv lt_plus_plus_first_second:
  ((?a + ?b) < (?c + ?a)) <=> (?b < ?c)
without
  (?b < ?c)

/*
  Equivalence:
      b + a < a + c
  <=> b < c.
*/
equiv lt_plus_plus_second_first_rem:
  (?b < ?c) => ((?b + ?a) < (?a + ?c))

equiv lt_plus_plus_second_first:
  ((?b + ?a) < (?a + ?c)) <=> (?b < ?c)
without
  (?b < ?c)

/*
  Equivalence:
      b + a < c + a
  <=> b < c.
*/
equiv lt_plus_plus_second_second_rem:
  (?b < ?c) => ((?b + ?a) < (?c + ?a))

equiv lt_plus_plus_second_second:
  ((?b + ?a) < (?c + ?a)) <=> (?b < ?c)
without
  (?b < ?c)

/*
  Equivalence:
      a + b < a
  <=> b < 0.
*/
equiv lt_plus_first_eq1:
  ((?a + ?b) < ?a) <=> (?b < numeric_const("0"))
without
     ?a = numeric_const("0")
  || (?a + ?b) = ?a
  || (?a + ?b) = numeric_const("0")

/*
  Equivalence:
      a + b < b
  <=> a < 0.
*/
equiv lt_plus_first_eq2:
  ((?a + ?b) < ?b) <=> (?a < numeric_const("0"))
without
     ?b = numeric_const("0")
  || (?a + ?b) = ?b
  || (?a + ?b) = numeric_const("0")

/*
  Equivalence:
      a < a + b
  <=> 0 < b.
*/
equiv lt_plus_second_eq1:
  (?a < (?a + ?b)) <=> (numeric_const("0") < ?b)
without
     ?a = numeric_const("0")
  || (?a + ?b) = ?a

/*
  Equivalence on LHS:
      b < a + b
  <=> 0 < a.
*/
equiv lt_plus_second_eq2:
  (?b < (?a + ?b)) <=> (numeric_const("0") < ?a)
without
     ?b = numeric_const("0")
  || (?a + ?b) = ?b

/*
  Equivalence.
      a <= b /\ b < 1 + a
  <=> a = b,
  where a, b are integers.
*/
equiv le_lt_eq:
  (?a <= ?b) => (?b < (numeric_const("1") + ?a)) <=> ?a = ?b

equiv le_lt_eq:
  (?b < (numeric_const("1") + ?a)) => (?a <= ?b) <=> ?a = ?b

/*
  Contradiction.
*/
equiv lt_lt_plus_contradiction:
  (?a < ?b) => (?b < (numeric_const("1") + ?a)) <=> False

equiv lt_lt_plus_contradiction:
  (?b < (numeric_const("1") + ?a)) => (?a < ?b) <=> False

/*
  Equivalence.
      0 < n
  <=> n != 0, where n is a positive integer constant.
*/
equiv lt_zero_one:
  (numeric_const("0") < numeric_const(?n)) <=> ?n != "0"

/*
  Contradiction.
*/
equiv lt_n_zero_left:
  (numeric_const(?n) < numeric_const("0")) <=> False

/*
  Equivalence.
       1 + x <= y
  <=>  x < y, where n is a non-negative integer constant.
*/
equiv le_plus_one_eq_lt:
  ((numeric_const("1") + ?x) <= ?y) <=> (?x < ?y)

/*
  Equivalence.
      x <= y /\ x < y
  <=> x < y.
*/
equiv lt_le_redundancy:
  (?x < ?y) => (?x <= ?y)

/*
  Implication:
      a < b
  =>  a != b.
*/
equiv lt_eq:
  (?a < ?b) => ?a = ?b <=> False

equiv lt_neq:
 (?a < ?b) => ?a != ?b

/*
  Implication:
      n + x < y
  =>  x < y, where n is a non-negative integer.
*/
equiv lt_plus_lt:
  ((numeric_const(?n) + ?x) < ?y) => (?x < ?y)

/*
  Implication:
      n + x < y
  =>  x <= y, where n is a non-negative integer.
*/
equiv lt_plus_le:
  ((numeric_const(?n) + ?x) < ?y) => (?x <= ?y)

/*
  Implication:
      n + x <= y
  =>  x <= y, where n is a non-negative integer.
*/
equiv le_plus_le:
  ((numeric_const(?n) + ?x) <= ?y) => (?x <= ?y)

equiv le_plus_le:
  ((?x + numeric_const(?n)) <= ?y) => (?x <= ?y)

/*
  Implication:
      x < y
  =>  x < n + y, where n is a non-negative integer.
*/
equiv lt_lt_plus:
  (?x < ?y) => (?x < (numeric_const(?n) + ?y))

/*
  Implication:
      x < y
  =>  x <= n + y, where n is a non-negative integer.
*/
equiv lt_le_plus:
  (?x < ?y) => (?x <= (numeric_const(?n) + ?y))

/*
  Implication:
      x <= y
  =>  x <= n + y, where n is a non-negative integer.
*/
equiv le_le_plus:
  (?x <= ?y) => (?x <= (numeric_const(?n) + ?y))

equiv le_disj:
  (?a <= ?b) <=> ?a = ?b || (?a < ?b)

/*rule lt_transitivity_left:
  | (?a < ?b) |-
if
  | ?b = (numeric_const("1") + _c) * (?a <= _c) |-*/

