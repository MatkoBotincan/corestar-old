/*******************************************
 * Tests for comparison (>,>=,<,<=) rules. *
 *******************************************/

/* gt_lt */
Implication:
  (a > b) |- (b < a)
? True

Implication:
  (a < b) |- (b > a)
? True

/* ge_le */
Implication:
  (a >= b) |- (b <= a)
? True

Implication:
  (a <= b) |- (b >= a)
? True

/* le_reflexivity */
Implication:
  (a <= a) |-
? True

Implication:
 |- (a <= a)
? True

/* le_antisymmetry */
Implication:
  (a <= b) * (b <= a) |- a = b
? True

Implication:
  (a < b) |- (a <= b) * (b <= a)
? False

Implication:
  (a <= b) |- (b <= a) * (a < b)
? False

/* le_zero_n */
Implication:
  (numeric_const("0") <= numeric_const("8")) |- False
? False

Implication:
 |- (numeric_const("0") <= numeric_const("8"))
? True

/* le_one_zero */
Implication:
  (numeric_const("1") <= numeric_const("0")) |- False
? True

Implication:
 |- (numeric_const("1") <= numeric_const("0"))
? False

/* le_plus_plus_first_first */
Implication:
  ((a + b) <= (a + c)) |- (b <= c)
? True

Implication:
  (b <= c) |- ((a + b) <= (a + c))
? True

/* le_plus_plus_first_second */
Implication:
  ((a + b) <= (c + a)) |- (b <= c)
? True

Implication:
  (b <= c) |- ((a + b) <= (c + a))
? True

/* le_plus_plus_second_first */
Implication:
  ((b + a) <= (a + c)) |- (b <= c)
? True

Implication:
  (b <= c) |- ((b + a) <= (a + c))
? True

/* le_plus_plus_second_second */
Implication:
  ((b + a) <= (c + a)) |- (b <= c)
? True

Implication:
  (b <= c) |- ((b + a) <= (c + a))
? True

/* le_plus_first_eq1 */
Implication:
 ((a + b) <= a) |- (b <= numeric_const("0"))
? True

Implication:
  (b <= numeric_const("0")) |- ((a + b) <= a)
? True

/* le_plus_first_eq2 */
Implication:
 ((a + b) <= b) |- (a <= numeric_const("0"))
? True

Implication:
  (a <= numeric_const("0")) |- ((a + b) <= b)
? True

/* le_plus_second_eq1 */
Implication:
  (a <= (a + b)) |- (numeric_const("0") <= b)
? True

Implication:
  (numeric_const("0") <= b) |- (a <= (a + b))
? True

/* le_plus_second_eq2 */
Implication:
 (b <= (a + b)) |- (numeric_const("0") <= a)
? True

Implication:
  (numeric_const("0") <= a) |- (b <= (a + b))
? True

/* lt_symmetry */
Implication:
  (a < b) * (b < a) |- False
? True

Implication:
 |- (a < b) * (b < a)
? False

Implication:
  (a < b) |- (b < a)
? False

/* lt_le_asymmetry_left */
Implication:
  (a < b) * (b <= a) |- False
? True

Implication:
  |- (a < b) * (b <= a)
? False

Implication:
  (a < b) |- (b <= a)
? False

Implication:
  (a <= b) |- (b < a)
? False

/* lt_irreflexivity */
Implication:
  (a < a) |-
? True

Implication:
 |- (a < a)
? False

/* lt_plus_plus_first_first */
Implication:
  ((a + b) < (a + c)) |- (b < c)
? True

Implication:
  (b < c) |- ((a + b) < (a + c))
? True

/* lt_plus_plus_first_second */
Implication:
  ((a + b) < (c + a)) |- (b < c)
? True

Implication:
  (b < c) |- ((a + b) < (c + a))
? True

/* lt_plus_plus_second_first */
Implication:
  ((b + a) < (a + c)) |- (b < c)
? True

Implication:
  (b < c) |- ((b + a) < (a + c))
? True

/* lt_plus_plus_second_second */
Implication:
  ((b + a) < (c + a)) |- (b < c)
? True

Implication:
  (b < c) |- ((b + a) < (c + a))
? True

/* lt_plus_first_eq1 */
Implication:
  ((a + b) < a) |- (b < numeric_const("0"))
? True

Implication:
  (b < numeric_const("0")) |- ((a + b) < a)
? True

/* lt_plus_first_eq2 */
Implication:
  ((a + b) < b) |- (a < numeric_const("0"))
? True

Implication:
  (a < numeric_const("0")) |- ((a + b) < b)
? True

/* lt_plus_second_eq1 */
Implication:
  (a < (a + b)) |- (numeric_const("0") < b)
? True

Implication:
  (numeric_const("0") < b) |- (a < (a + b))
? True

/* lt_plus_second_eq2 */
Implication:
  (b < (a + b)) |- (numeric_const("0") < a)
? True

Implication:
  (numeric_const("0") < a) |- (b < (a + b))
? True

/* le_lt_eq */
Implication:
  (a <= b) * (b < builtin_plus(numeric_const("1"), a)) |- a = b
? True

Implication:
 |- (a <= b) * (b < (numeric_const("1") + a)) * (a < b)
? False

Implication:
  (a <= b) |- (b < (numeric_const("1") + a))
? False

Implication:
  (b < (numeric_const("1") + a)) |- (a <= b)
? False


/* lt_lt_plus_contradiction */
Implication:
  (a < b) * (b < (numeric_const("1") + a)) |- False
? True

Implication:
 |- (a < b) * (b < (numeric_const("1") + a))
? False

/* le_one_zero_left */
Implication:
  (numeric_const("1") <= numeric_const("0")) |- False
? True

Implication:
 |- (numeric_const("1") <= numeric_const("0"))
? False

/* le_zero_one */
Implication:
  (numeric_const("0") <= numeric_const("1")) |- False
? False

Implication:
 |- (numeric_const("0") <= numeric_const("1"))
? True

/* lt_one_zero_left */
Implication:
  (numeric_const("1") < numeric_const("0")) |- False
? True

Implication:
 |- (numeric_const("1") < numeric_const("0"))
? False

/* lt_zero_one */
Implication:
  (numeric_const("0") < numeric_const("1")) |- False
? False

Implication:
 |- (numeric_const("0") < numeric_const("1"))
? True

/* le_eq_lt_plus_left */
Implication:
  ((numeric_const("1") + x) <= y) |- (x < y)
? True

Implication:
  (x < y) |- ((numeric_const("1") + x) <= y)
? True

/* lt_le_redundancy */
/* FIXME: How can this be tested?*/
Implication:
  (x <= y) * (x < y) |- False
? True

Implication:
 |- (x <= y) * (x < y)
? True

Implication:
  (x < y) |- (x <= y)
? True

/* lt_eq */
Implication:
  (a < b) |- a = b
? False

Implication:
  |- (a < b) * a = b
? False

/* lt_neq */

Implication:
  (a < b) |- a != b
? True

Implication:
  (a < b) * a != b |- False
? False

Implication:
  |- a != b * (b < a)
? True

/* lt_plus_lt  */
Implication:
  ((numeric_const("5") + x) < y) |- (x < y)
? True

/* FIXME: ... */
Implication:
  |- ((numeric_const("5") + x) < y) * (x < y)
? True

/* lt_plus_le  */
Implication:
  ((numeric_const("5") + x) < y) |- (x <= y)
? True

/* FIXME: ... */
Implication:
  |- ((numeric_const("5") + x) < y) * (x <= y)
? True

/* le_plus_le  */
Implication:
  ((numeric_const("5") + x) <= y) |- (x <= y)
? True

/* FIXME: ... */
Implication:
  |- ((numeric_const("5") + x) <= y) * (x <= y)
? True

Implication:
  |- "a" = "a"
? True

Implication:
  |- "a" != "a"
? False

Implication:
  |- "a" = "b"
? False

Implication:
  |- "a" != "b"
? True

Implication:
  |- "1" != "0"
? True
