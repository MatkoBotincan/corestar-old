Goal
r_1793 = (numeric_const(1) + length(v_310)) =
length(app(v_310, cons(v_309, empty()))) = $i0  *
r_1799 = v_309 = $r4 = $ret_var  * r_1800 = @this: = r0  *
r_1802 = v_311 = **second**  * r_1813 = numeric_const(0) = length(empty())  *
r_1819 = numeric_const(1) = length(cons(v_309, empty()))   
| $i0 != numeric_const(0)
  | field($r3, <java.util.LinkedList$Entry: java.lang.Object element>, v_309) *
    field($r3, <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
          $r2) *
    field($r3,
          <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
          r_1815) *
    field($r2,
          <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
          $r3) *
    field(@this:, <java.util.LinkedList: java.util.LinkedList$Entry header>,
          $r2) *
    field(@this:, <java.util.AbstractList: int modCount>, r_1810) *
    field(@this:, <java.util.LinkedList: int size>, $i0) *
    field($r2, <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
          r_1806)
  (v_310 = empty() * r_1806 = $r3 * r_1815 = $r2 |  )
  || ( | dseg_ne(r_1806, $r2, $r3, r_1815, v_310) ) 
|- v_311 = r_1932 * **first** = r_1931 * v_309 = r_1930 * nil() = r_1929 *
   empty() = r_1928 * {list=r_1928} = r_1927 * @this: = r_1926 *
   v_311 = r_1925 * v_309 = r_1924 * cons(r_1924, r_1928) = r_1923 *
   v_310 = r_1922 * app(r_1922, r_1923) = r_1921 * {list=r_1921} = r_1920 | 
    (r_1930 = r_1929 * r_1932 = r_1931
    | LinkedList$java.util.LinkedList(r_1926, r_1927) )
    || (r_1930 = r_1924 * r_1932 = r_1925
       | LinkedList$java.util.LinkedList(r_1926, r_1920) )

Start time :0.684042 
Foo

====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================

>r_1793 = (numeric_const(1) + length(v_310)) =
 length(app(v_310, cons(v_309, empty()))) = $i0  *
 r_1799 = v_309 = $r4 = $ret_var  * r_1800 = @this: = r0  *
 r_1802 = v_311 = **second**  *
 r_1813 = numeric_const(0) = length(empty())  *
 r_1819 = numeric_const(1) = length(cons(v_309, empty()))   
 | $i0 != numeric_const(0)
   | field($r2,
           <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
           r_1806) *
     field(@this:, <java.util.LinkedList: int size>, $i0) *
     field(@this:, <java.util.AbstractList: int modCount>, r_1810) *
     field(@this:, <java.util.LinkedList: java.util.LinkedList$Entry header>,
           $r2) *
     field($r2,
           <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
           $r3) *
     field($r3,
           <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
           r_1815) *
     field($r3,
           <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>, $r2) *
     field($r3, <java.util.LinkedList$Entry: java.lang.Object element>, v_309)
   (v_310 = empty() * r_1806 = $r3 * r_1815 = $r2 |  )
   || ( | dseg_ne(r_1806, $r2, $r3, r_1815, v_310) ) 
 |-  | 
    (v_309 = nil() * v_311 = **first**
    | LinkedList$java.util.LinkedList(@this:, {list=empty()}) )
    || (v_309 = v_309 * v_311 = v_311
       | LinkedList$java.util.LinkedList(@this:,
                                         {list=app(v_310,
                                               cons(v_309, empty()))})
       )

Rule: node_rollup_left

Foo

====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================

->r_1793 = (numeric_const(1) + length(v_310)) =
  length(app(v_310, cons(v_309, empty()))) = $i0  *
  r_1799 = v_309 = $r4 = $ret_var  * r_1800 = @this: = r0  *
  r_1802 = v_311 = **second**  *
  r_1813 = numeric_const(0) = length(empty())  *
  r_1819 = numeric_const(1) = length(cons(v_309, empty()))   
  | $i0 != numeric_const(0)
    | field($r2,
            <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
            r_1806) *
      field(@this:, <java.util.LinkedList: int size>, $i0) *
      field(@this:, <java.util.AbstractList: int modCount>, r_1810) *
      field(@this:,
            <java.util.LinkedList: java.util.LinkedList$Entry header>, $r2) *
      field($r2,
            <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
            $r3) *
      node($r3, r_1815, $r2, v_309)
    (v_310 = empty() * r_1806 = $r3 * r_1815 = $r2 |  )
    || ( | dseg_ne(r_1806, $r2, $r3, r_1815, v_310) ) 
  |-  | 
     (v_309 = nil() * v_311 = **first**
     | LinkedList$java.util.LinkedList(@this:, {list=empty()}) )
     || (v_309 = v_309 * v_311 = v_311
        | LinkedList$java.util.LinkedList(@this:,
                                          {list=app(v_310,
                                                cons(v_309, empty()))})
        )

Rule: dseg_node_rollup_left

Foo

====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================

-->r_1793 = (numeric_const(1) + length(v_310)) =
   length(app(v_310, cons(v_309, empty()))) = $i0  *
   r_1799 = v_309 = $r4 = $ret_var  * r_1800 = @this: = r0  *
   r_1802 = v_311 = **second**  *
   r_1813 = numeric_const(0) = length(empty())  *
   r_1819 = numeric_const(1) = length(cons(v_309, empty()))   
   | $i0 != numeric_const(0)
     | field($r2,
             <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
             r_1806) *
       field(@this:, <java.util.LinkedList: int size>, $i0) *
       field(@this:, <java.util.AbstractList: int modCount>, r_1810) *
       field(@this:,
             <java.util.LinkedList: java.util.LinkedList$Entry header>, $r2) *
       field($r2,
             <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
             $r3) *
       dseg_ne($r3, r_1815, $r2, $r3, cons(v_309, empty()))
     (v_310 = empty() * r_1806 = $r3 * r_1815 = $r2 |  )
     || ( | dseg_ne(r_1806, $r2, $r3, r_1815, v_310) ) 
   |-  | 
      (v_309 = nil() * v_311 = **first**
      | LinkedList$java.util.LinkedList(@this:, {list=empty()}) )
      || (v_309 = v_309 * v_311 = v_311
         | LinkedList$java.util.LinkedList(@this:,
                                           {list=app(v_310,
                                                 cons(v_309, empty()))})
         )



====================Start rewrites======================Using rule:
length_cons gives r_1939 = (numeric_const(1) + numeric_const(0))  
equal to r_1819 = numeric_const(1) = length(cons(v_309, empty())) 
.
Rewritten to
 r_1793 = ((r_1939 + numeric_const(0)) + length(v_310)) =
 length(app(v_310, cons(v_309, empty()))) = $i0  *
 r_1799 = v_309 = $r4 = $ret_var  * r_1800 = @this: = r0  *
 r_1802 = v_311 = **second**  *
 r_1813 = numeric_const(0) = length(empty())  *
 r_1939 = ((r_1939 + numeric_const(0)) + numeric_const(0)) =
 numeric_const(1) = length(cons(v_309, empty()))   
 | $i0 != numeric_const(0)
   | field($r2,
           <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
           r_1806) *
     field(@this:, <java.util.LinkedList: int size>, $i0) *
     field(@this:, <java.util.AbstractList: int modCount>, r_1810) *
     field(@this:, <java.util.LinkedList: java.util.LinkedList$Entry header>,
           $r2) *
     field($r2,
           <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
           $r3) *
     dseg_ne($r3, r_1815, $r2, $r3, cons(v_309, empty()))
   (v_310 = empty() * r_1806 = $r3 * r_1815 = $r2 |  )
   || ( | dseg_ne(r_1806, $r2, $r3, r_1815, v_310) ) 
 |-  | 
    (v_309 = nil() * v_311 = **first**
    | LinkedList$java.util.LinkedList(@this:, {list=empty()}) )
    || (v_309 = v_309 * v_311 = v_311
       | LinkedList$java.util.LinkedList(@this:,
                                         {list=app(v_310,
                                               cons(v_309, empty()))})
       )


====================Start rewrites======================Rewritten to
 r_1793 = ((r_1939 + numeric_const(0)) + length(v_310)) =
 length(app(v_310, cons(v_309, empty()))) = $i0  *
 r_1799 = v_309 = $r4 = $ret_var  * r_1800 = @this: = r0  *
 r_1802 = v_311 = **second**  *
 r_1813 = numeric_const(0) = length(empty())  *
 r_1939 = ((r_1939 + numeric_const(0)) + numeric_const(0)) =
 numeric_const(1) = length(cons(v_309, empty()))   
 | $i0 != numeric_const(0)
   | field($r2,
           <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
           r_1806) *
     field(@this:, <java.util.LinkedList: int size>, $i0) *
     field(@this:, <java.util.AbstractList: int modCount>, r_1810) *
     field(@this:, <java.util.LinkedList: java.util.LinkedList$Entry header>,
           $r2) *
     field($r2,
           <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
           $r3) *
     dseg_ne($r3, r_1815, $r2, $r3, cons(v_309, empty()))
   (v_310 = empty() * r_1806 = $r3 * r_1815 = $r2 |  )
   || ( | dseg_ne(r_1806, $r2, $r3, r_1815, v_310) ) 
 |-  | 
    (v_309 = nil() * v_311 = **first**
    | LinkedList$java.util.LinkedList(@this:, {list=empty()}) )
    || (v_309 = v_309 * v_311 = v_311
       | LinkedList$java.util.LinkedList(@this:,
                                         {list=app(v_310,
                                               cons(v_309, empty()))})
       )


====================Start rewrites=======================================Finished rewrites====================

Query external prover
FooElim eqs : v_310 = empty() * r_1806 = $r3 *
r_1815 = $r2


====================Start rewrites======================Using rule:
plus_zero_second gives
r_1939 = numeric_const(1) = length(cons(v_309, v_310))  
equal to r_1793 = (numeric_const(1) + length(v_310)) =
         length(app(v_310, cons(v_309, v_310))) = $i0 
.
Rewritten to
 r_1795 = length(v_310) = numeric_const(0)  * r_1797 = v_310 = empty()  *
 r_1799 = v_309 = $r4 = $ret_var  * r_1800 = @this: = r0  *
 r_1802 = v_311 = **second**  *
 r_1939 = numeric_const(1) = length(cons(v_309, v_310)) =
 ($i0 + length(v_310)) = length(app(v_310, cons(v_309, v_310))) = $i0   
  | $i0 != length(v_310)
    | field($r2,
            <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
            $r3) *
      field(@this:, <java.util.LinkedList: int size>, $i0) *
      field(@this:, <java.util.AbstractList: int modCount>, r_1810) *
      field(@this:,
            <java.util.LinkedList: java.util.LinkedList$Entry header>, $r2) *
      field($r2,
            <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
            $r3) *
      dseg_ne($r3, $r2, $r2, $r3, cons(v_309, v_310))
     
 |-  | 
    (v_309 = nil() * v_311 = **first**
    | LinkedList$java.util.LinkedList(@this:, {list=v_310}) )
    || (v_309 = v_309 * v_311 = v_311
       | LinkedList$java.util.LinkedList(@this:,
                                         {list=app(v_310, cons(v_309, v_310))})
       )


====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites======================Using rule:
app_empty_first gives r_1798 = cons(v_309, v_310)  
equal to r_1803 = app(v_310, cons(v_309, v_310)) 
.
Rewritten to
 r_1795 = length(v_310) = numeric_const(0)  * r_1797 = v_310 = empty()  *
 r_1798 = cons(v_309, v_310) = app(v_310, cons(v_309, v_310))  *
 r_1799 = v_309 = $r4 = $ret_var  * r_1800 = @this: = r0  *
 r_1802 = v_311 = **second**  *
 r_1939 = numeric_const(1) = length(cons(v_309, v_310)) = $i0   
 | $i0 != length(v_310)
   | field($r2,
           <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>, $r3) *
     field(@this:, <java.util.LinkedList: int size>, $i0) *
     field(@this:, <java.util.AbstractList: int modCount>, r_1810) *
     field(@this:, <java.util.LinkedList: java.util.LinkedList$Entry header>,
           $r2) *
     field($r2,
           <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
           $r3) *
     dseg_ne($r3, $r2, $r2, $r3, cons(v_309, v_310))
    
 |-  | 
    (v_309 = nil() * v_311 = **first**
    | LinkedList$java.util.LinkedList(@this:, {list=v_310}) )
    || (v_309 = v_309 * v_311 = v_311
       | LinkedList$java.util.LinkedList(@this:, {list=cons(v_309, v_310)}) 
       )


====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================

--->r_1795 = length(v_310) = numeric_const(0)  * r_1797 = v_310 = empty()  *
    r_1799 = v_309 = $r4 = $ret_var  * r_1800 = @this: = r0  *
    r_1802 = v_311 = **second**  *
    r_1939 = numeric_const(1) = length(cons(v_309, v_310)) = $i0   
    | $i0 != length(v_310)
      | dseg_ne($r3, $r2, $r2, $r3, cons(v_309, v_310)) *
        field($r2,
              <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
              $r3) *
        field(@this:,
              <java.util.LinkedList: java.util.LinkedList$Entry header>, $r2) *
        field(@this:, <java.util.AbstractList: int modCount>, r_1810) *
        field(@this:, <java.util.LinkedList: int size>, $i0) *
        field($r2,
              <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
              $r3)
       
    |-  | 
       (v_309 = nil() * v_311 = **first**
       | LinkedList$java.util.LinkedList(@this:, {list=v_310}) )
       || (v_309 = v_309 * v_311 = v_311
          | LinkedList$java.util.LinkedList(@this:, {list=cons(v_309, v_310)})
          )



====================Start rewrites======================Using rule:
length_cons gives r_1967 = ($i0 + length(v_310))  
equal to r_1939 = numeric_const(1) = length(cons(v_309, v_310)) = $i0 
.
Rewritten to
 r_1795 = length(v_310) = numeric_const(0)  * r_1797 = v_310 = empty()  *
 r_1799 = v_309 = $r4 = $ret_var  * r_1800 = @this: = r0  *
 r_1802 = v_311 = **second**  *
 r_1967 = ($i0 + length(v_310)) = numeric_const(1) =
 length(cons(v_309, v_310)) = $i0   
 | $i0 != length(v_310)
   | dseg_ne($r3, $r2, $r2, $r3, cons(v_309, v_310)) *
     field($r2,
           <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
           $r3) *
     field(@this:, <java.util.LinkedList: java.util.LinkedList$Entry header>,
           $r2) *
     field(@this:, <java.util.AbstractList: int modCount>, r_1810) *
     field(@this:, <java.util.LinkedList: int size>, $i0) *
     field($r2,
           <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>, $r3)
    
 |-  | 
    (v_309 = nil() * v_311 = **first**
    | LinkedList$java.util.LinkedList(@this:, {list=v_310}) )
    || (v_309 = v_309 * v_311 = v_311
       | LinkedList$java.util.LinkedList(@this:, {list=cons(v_309, v_310)}) 
       )


====================Start rewrites======================Rewritten to
 r_1795 = length(v_310) = numeric_const(0)  * r_1797 = v_310 = empty()  *
 r_1799 = v_309 = $r4 = $ret_var  * r_1800 = @this: = r0  *
 r_1802 = v_311 = **second**  *
 r_1967 = ($i0 + length(v_310)) = numeric_const(1) =
 length(cons(v_309, v_310)) = $i0   
 | $i0 != length(v_310)
   | dseg_ne($r3, $r2, $r2, $r3, cons(v_309, v_310)) *
     field($r2,
           <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
           $r3) *
     field(@this:, <java.util.LinkedList: java.util.LinkedList$Entry header>,
           $r2) *
     field(@this:, <java.util.AbstractList: int modCount>, r_1810) *
     field(@this:, <java.util.LinkedList: int size>, $i0) *
     field($r2,
           <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>, $r3)
    
 |-  | 
    (v_309 = nil() * v_311 = **first**
    | LinkedList$java.util.LinkedList(@this:, {list=v_310}) )
    || (v_309 = v_309 * v_311 = v_311
       | LinkedList$java.util.LinkedList(@this:, {list=cons(v_309, v_310)}) 
       )


====================Start rewrites=======================================Finished rewrites====================

Query external prover
Case split on or right!
Foo

====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================

---->r_1795 = length(v_310) = numeric_const(0)  * r_1797 = v_310 = empty()  *
     r_1799 = v_309 = $r4 = $ret_var  * r_1800 = @this: = r0  *
     r_1802 = v_311 = **second**  *
     r_1967 = numeric_const(1) = length(cons(v_309, v_310)) = $i0   
     | $i0 != length(v_310)
       | field($r2,
               <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
               $r3) *
         field(@this:, <java.util.LinkedList: int size>, $i0) *
         field(@this:, <java.util.AbstractList: int modCount>, r_1810) *
         field(@this:,
               <java.util.LinkedList: java.util.LinkedList$Entry header>, $r2) *
         field($r2,
               <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
               $r3) *
         dseg_ne($r3, $r2, $r2, $r3, cons(v_309, v_310))
        
     |-  |  False



====================Start rewrites======================Using rule:
length_cons gives r_1986 = ($i0 + length(v_310))  
equal to r_1967 = numeric_const(1) = length(cons(v_309, v_310)) = $i0 
.
Rewritten to
 r_1795 = length(v_310) = numeric_const(0)  * r_1797 = v_310 = empty()  *
 r_1799 = v_309 = $r4 = $ret_var  * r_1800 = @this: = r0  *
 r_1802 = v_311 = **second**  *
 r_1986 = ($i0 + length(v_310)) = numeric_const(1) =
 length(cons(v_309, v_310)) = $i0   
 | $i0 != length(v_310)
   | field($r2,
           <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>, $r3) *
     field(@this:, <java.util.LinkedList: int size>, $i0) *
     field(@this:, <java.util.AbstractList: int modCount>, r_1810) *
     field(@this:, <java.util.LinkedList: java.util.LinkedList$Entry header>,
           $r2) *
     field($r2,
           <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
           $r3) *
     dseg_ne($r3, $r2, $r2, $r3, cons(v_309, v_310))
    
 |-  |  False


====================Start rewrites======================Rewritten to
 r_1795 = length(v_310) = numeric_const(0)  * r_1797 = v_310 = empty()  *
 r_1799 = v_309 = $r4 = $ret_var  * r_1800 = @this: = r0  *
 r_1802 = v_311 = **second**  *
 r_1986 = ($i0 + length(v_310)) = numeric_const(1) =
 length(cons(v_309, v_310)) = $i0   
 | $i0 != length(v_310)
   | field($r2,
           <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>, $r3) *
     field(@this:, <java.util.LinkedList: int size>, $i0) *
     field(@this:, <java.util.AbstractList: int modCount>, r_1810) *
     field(@this:, <java.util.LinkedList: java.util.LinkedList$Entry header>,
           $r2) *
     field($r2,
           <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
           $r3) *
     dseg_ne($r3, $r2, $r2, $r3, cons(v_309, v_310))
    
 |-  |  False


====================Start rewrites=======================================Finished rewrites====================

Ask external prover to complete proof.
Not an or!
Find plain contradiction:
Ask external prover to complete proof.
Backtracking!
Foo

====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================

---->r_1968 = numeric_const(1) = length(cons(v_309, v_310)) = $i0  *
     r_1978 = v_311 = **second**  * r_1979 = @this: = r0  *
     r_1980 = v_309 = $r4 = $ret_var  * r_1982 = v_310 = empty()  *
     r_1984 = length(v_310) = numeric_const(0)   
     | $i0 != length(v_310)
       | field($r2,
               <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
               $r3) *
         field(@this:, <java.util.LinkedList: int size>, $i0) *
         field(@this:, <java.util.AbstractList: int modCount>, r_1973) *
         field(@this:,
               <java.util.LinkedList: java.util.LinkedList$Entry header>, $r2) *
         field($r2,
               <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
               $r3) *
         dseg_ne($r3, $r2, $r2, $r3, cons(v_309, v_310))
        
     |-  | LinkedList$java.util.LinkedList(@this:, {list=cons(v_309, v_310)}) 

Rule: apf_body_right_LinkedList

Foo

====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================

----->r_1978 = v_311 = **second**  * r_1979 = @this: = r0  *
      r_1980 = v_309 = $r4 = $ret_var  * r_1982 = v_310 = empty()  *
      r_1984 = length(v_310) = numeric_const(0)  *
      r_1995 = length(cons(v_309, v_310)) = numeric_const(1) = $i0  
      field(@this:, <java.util.LinkedList: int size>, $i0)
      | $i0 != length(v_310)
        | dseg_ne($r3, $r2, $r2, $r3, cons(v_309, v_310)) *
          field($r2,
                <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
                $r3) *
          field(@this:,
                <java.util.LinkedList: java.util.LinkedList$Entry header>,
                $r2) *
          field(@this:, <java.util.AbstractList: int modCount>, r_1973) *
          field($r2,
                <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
                $r3)
         
      |- 
         | AbstractSequentialList$java.util.AbstractSequentialList(@this:,
                                                                   {modCount=r_1993}) *
           field(@this:,
                 <java.util.LinkedList: java.util.LinkedList$Entry header>,
                 r_1990) *
           field(r_1990,
                 <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
                 r_1991) *
           field(r_1990,
                 <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
                 r_1989) *
           dseg(r_1991, r_1990, r_1990, r_1989, cons(v_309, v_310))
         

Rule: field_remove1

Foo

====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================

------>r_1978 = v_311 = **second**  * r_1979 = @this: = r0  *
       r_1980 = v_309 = $r4 = $ret_var  * r_1982 = v_310 = empty()  *
       r_1984 = length(v_310) = numeric_const(0)  *
       r_1995 = length(cons(v_309, v_310)) = numeric_const(1) = $i0  
       field(@this:,
             <java.util.LinkedList: java.util.LinkedList$Entry header>, $r2)*
       field(@this:, <java.util.LinkedList: int size>, $i0)
       | $i0 != length(v_310)
         | field($r2,
                 <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
                 $r3) *
           field(@this:, <java.util.AbstractList: int modCount>, r_1973) *
           dseg_ne($r3, $r2, $r2, $r3, cons(v_309, v_310)) *
           field($r2,
                 <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
                 $r3)
          
       |- 
          | AbstractSequentialList$java.util.AbstractSequentialList(@this:,
                                                                    {modCount=r_1993}) *
            field($r2,
                  <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
                  r_1991) *
            field($r2,
                  <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
                  r_1989) *
            dseg(r_1991, $r2, $r2, r_1989, cons(v_309, v_310))
          

Rule: field_remove1

Foo

====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================

------->r_1978 = v_311 = **second**  * r_1979 = @this: = r0  *
        r_1980 = v_309 = $r4 = $ret_var  * r_1982 = v_310 = empty()  *
        r_1984 = length(v_310) = numeric_const(0)  *
        r_1995 = length(cons(v_309, v_310)) = numeric_const(1) = $i0  
        field($r2,
              <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
              $r3)*
        field(@this:,
              <java.util.LinkedList: java.util.LinkedList$Entry header>, $r2)*
        field(@this:, <java.util.LinkedList: int size>, $i0)
        | $i0 != length(v_310)
          | field($r2,
                  <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
                  $r3) *
            dseg_ne($r3, $r2, $r2, $r3, cons(v_309, v_310)) *
            field(@this:, <java.util.AbstractList: int modCount>, r_1973)
           
        |- 
           | AbstractSequentialList$java.util.AbstractSequentialList(
             @this:, {modCount=r_1993}) *
             field($r2,
                   <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
                   r_1989) *
             dseg($r3, $r2, $r2, r_1989, cons(v_309, v_310))
           

Rule: field_remove1

Foo

====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================

-------->r_1978 = v_311 = **second**  * r_1979 = @this: = r0  *
         r_1980 = v_309 = $r4 = $ret_var  * r_1982 = v_310 = empty()  *
         r_1984 = length(v_310) = numeric_const(0)  *
         r_1995 = length(cons(v_309, v_310)) = numeric_const(1) = $i0  
         field($r2,
               <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
               $r3)*
         field($r2,
               <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
               $r3)*
         field(@this:,
               <java.util.LinkedList: java.util.LinkedList$Entry header>, $r2)*
         field(@this:, <java.util.LinkedList: int size>, $i0)
         | $i0 != length(v_310)
           | field(@this:, <java.util.AbstractList: int modCount>, r_1973) *
             dseg_ne($r3, $r2, $r2, $r3, cons(v_309, v_310))
            
         |- 
            | AbstractSequentialList$java.util.AbstractSequentialList(
              @this:, {modCount=r_1993}) *
              dseg($r3, $r2, $r2, $r3, cons(v_309, v_310))
            

Rule: dseg_non_empty3_right

Foo

====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================

--------->r_1978 = v_311 = **second**  * r_1979 = @this: = r0  *
          r_1980 = v_309 = $r4 = $ret_var  * r_1982 = v_310 = empty()  *
          r_1984 = length(v_310) = numeric_const(0)  *
          r_1995 = length(cons(v_309, v_310)) = numeric_const(1) = $i0  
          dseg_ne($r3, $r2, $r2, $r3, cons(v_309, v_310))*
          field($r2,
                <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
                $r3)*
          field($r2,
                <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
                $r3)*
          field(@this:,
                <java.util.LinkedList: java.util.LinkedList$Entry header>,
                $r2)*
          field(@this:, <java.util.LinkedList: int size>, $i0)
          | $i0 != length(v_310)
            | field(@this:, <java.util.AbstractList: int modCount>, r_1973) 
             
          |- 
             | AbstractSequentialList$java.util.AbstractSequentialList(
               @this:, {modCount=r_1993})
             

Rule: apf_body_right_AbstractSequentialList

Foo

====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================

---------->r_1978 = v_311 = **second**  * r_1979 = @this: = r0  *
           r_1980 = v_309 = $r4 = $ret_var  * r_1982 = v_310 = empty()  *
           r_1984 = length(v_310) = numeric_const(0)  *
           r_1995 = length(cons(v_309, v_310)) = numeric_const(1) = $i0  
           dseg_ne($r3, $r2, $r2, $r3, cons(v_309, v_310))*
           field($r2,
                 <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
                 $r3)*
           field($r2,
                 <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
                 $r3)*
           field(@this:,
                 <java.util.LinkedList: java.util.LinkedList$Entry header>,
                 $r2)*
           field(@this:, <java.util.LinkedList: int size>, $i0)
           | $i0 != length(v_310)
             | field(@this:, <java.util.AbstractList: int modCount>, r_1973) 
              
           |- 
              | AbstractList$java.util.AbstractList(@this:, {modCount=r_1996})
              

Rule: apf_body_right_AbstractList

Foo

====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================

----------->r_1978 = v_311 = **second**  * r_1979 = @this: = r0  *
            r_1980 = v_309 = $r4 = $ret_var  * r_1982 = v_310 = empty()  *
            r_1984 = length(v_310) = numeric_const(0)  *
            r_1995 = length(cons(v_309, v_310)) = numeric_const(1) = $i0  
            dseg_ne($r3, $r2, $r2, $r3, cons(v_309, v_310))*
            field($r2,
                  <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
                  $r3)*
            field($r2,
                  <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
                  $r3)*
            field(@this:,
                  <java.util.LinkedList: java.util.LinkedList$Entry header>,
                  $r2)*
            field(@this:, <java.util.LinkedList: int size>, $i0)
            | $i0 != length(v_310)
              | field(@this:, <java.util.AbstractList: int modCount>, r_1973) 
               
            |- 
               | field(@this:, <java.util.AbstractList: int modCount>, r_1998)
               

Rule: field_remove1

Foo

====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================

------------>r_1978 = v_311 = **second**  * r_1979 = @this: = r0  *
             r_1980 = v_309 = $r4 = $ret_var  * r_1982 = v_310 = empty()  *
             r_1984 = length(v_310) = numeric_const(0)  *
             r_1995 = length(cons(v_309, v_310)) = numeric_const(1) = $i0  
             field(@this:, <java.util.AbstractList: int modCount>, r_1973)*
             dseg_ne($r3, $r2, $r2, $r3, cons(v_309, v_310))*
             field($r2,
                   <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
                   $r3)*
             field($r2,
                   <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
                   $r3)*
             field(@this:,
                   <java.util.LinkedList: java.util.LinkedList$Entry header>,
                   $r2)*
             field(@this:, <java.util.LinkedList: int size>, $i0)
             | $i0 != length(v_310) |    |-  |  



====================Start rewrites======================Using rule:
length_cons gives r_2000 = ($i0 + length(v_310))  
equal to r_1995 = length(cons(v_309, v_310)) = numeric_const(1) = $i0 
.
Rewritten to
 r_1978 = v_311 = **second**  * r_1979 = @this: = r0  *
 r_1980 = v_309 = $r4 = $ret_var  * r_1982 = v_310 = empty()  *
 r_1984 = length(v_310) = numeric_const(0)  *
 r_2000 = ($i0 + length(v_310)) = length(cons(v_309, v_310)) =
 numeric_const(1) = $i0  
 field(@this:, <java.util.AbstractList: int modCount>, r_1973)*
 dseg_ne($r3, $r2, $r2, $r3, cons(v_309, v_310))*
 field($r2,
       <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>, $r3)*
 field($r2, <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
       $r3)*
 field(@this:, <java.util.LinkedList: java.util.LinkedList$Entry header>, $r2)*
 field(@this:, <java.util.LinkedList: int size>, $i0)
 | $i0 != length(v_310) |    |-  |  


====================Start rewrites======================Rewritten to
 r_1978 = v_311 = **second**  * r_1979 = @this: = r0  *
 r_1980 = v_309 = $r4 = $ret_var  * r_1982 = v_310 = empty()  *
 r_1984 = length(v_310) = numeric_const(0)  *
 r_2000 = ($i0 + length(v_310)) = length(cons(v_309, v_310)) =
 numeric_const(1) = $i0  
 field(@this:, <java.util.AbstractList: int modCount>, r_1973)*
 dseg_ne($r3, $r2, $r2, $r3, cons(v_309, v_310))*
 field($r2,
       <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>, $r3)*
 field($r2, <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
       $r3)*
 field(@this:, <java.util.LinkedList: java.util.LinkedList$Entry header>, $r2)*
 field(@this:, <java.util.LinkedList: int size>, $i0)
 | $i0 != length(v_310) |    |-  |  


====================Start rewrites=======================================Finished rewrites====================

--->r_1940 = numeric_const(1) = length(cons(v_309, empty()))  *
    r_1946 = numeric_const(0) = length(empty())  *
    r_1957 = v_311 = **second**  * r_1959 = @this: = r0  *
    r_1960 = v_309 = $r4 = $ret_var  *
    r_1966 = (numeric_const(1) + length(v_310)) =
    length(app(v_310, cons(v_309, empty()))) = $i0   
    | $i0 != numeric_const(0)
      | dseg_ne($r3, r_1945, $r2, $r3, cons(v_309, empty())) *
        field($r2,
              <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
              $r3) *
        field(@this:,
              <java.util.LinkedList: java.util.LinkedList$Entry header>, $r2) *
        field(@this:, <java.util.AbstractList: int modCount>, r_1949) *
        field(@this:, <java.util.LinkedList: int size>, $i0) *
        field($r2,
              <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
              r_1953) *
        dseg_ne(r_1953, $r2, $r3, r_1945, v_310)
       
    |-  | 
       (v_309 = nil() * v_311 = **first**
       | LinkedList$java.util.LinkedList(@this:, {list=empty()}) )
       || (v_309 = v_309 * v_311 = v_311
          | LinkedList$java.util.LinkedList(@this:,
                                            {list=app(v_310,
                                                  cons(v_309, empty()))})
          )



====================Start rewrites======================Using rule:
length_cons gives r_2001 = (numeric_const(1) + numeric_const(0))  
equal to r_1940 = numeric_const(1) = length(cons(v_309, empty())) 
.
Rewritten to
 r_1946 = numeric_const(0) = length(empty())  *
 r_1957 = v_311 = **second**  * r_1959 = @this: = r0  *
 r_1960 = v_309 = $r4 = $ret_var  *
 r_1966 = ((r_2001 + numeric_const(0)) + length(v_310)) =
 length(app(v_310, cons(v_309, empty()))) = $i0  *
 r_2001 = ((r_2001 + numeric_const(0)) + numeric_const(0)) =
 numeric_const(1) = length(cons(v_309, empty()))   
 | $i0 != numeric_const(0)
   | dseg_ne($r3, r_1945, $r2, $r3, cons(v_309, empty())) *
     field($r2,
           <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
           $r3) *
     field(@this:, <java.util.LinkedList: java.util.LinkedList$Entry header>,
           $r2) *
     field(@this:, <java.util.AbstractList: int modCount>, r_1949) *
     field(@this:, <java.util.LinkedList: int size>, $i0) *
     field($r2,
           <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
           r_1953) *
     dseg_ne(r_1953, $r2, $r3, r_1945, v_310)
    
 |-  | 
    (v_309 = nil() * v_311 = **first**
    | LinkedList$java.util.LinkedList(@this:, {list=empty()}) )
    || (v_309 = v_309 * v_311 = v_311
       | LinkedList$java.util.LinkedList(@this:,
                                         {list=app(v_310,
                                               cons(v_309, empty()))})
       )


====================Start rewrites======================Rewritten to
 r_1946 = numeric_const(0) = length(empty())  *
 r_1957 = v_311 = **second**  * r_1959 = @this: = r0  *
 r_1960 = v_309 = $r4 = $ret_var  *
 r_1966 = ((r_2001 + numeric_const(0)) + length(v_310)) =
 length(app(v_310, cons(v_309, empty()))) = $i0  *
 r_2001 = ((r_2001 + numeric_const(0)) + numeric_const(0)) =
 numeric_const(1) = length(cons(v_309, empty()))   
 | $i0 != numeric_const(0)
   | dseg_ne($r3, r_1945, $r2, $r3, cons(v_309, empty())) *
     field($r2,
           <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
           $r3) *
     field(@this:, <java.util.LinkedList: java.util.LinkedList$Entry header>,
           $r2) *
     field(@this:, <java.util.AbstractList: int modCount>, r_1949) *
     field(@this:, <java.util.LinkedList: int size>, $i0) *
     field($r2,
           <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
           r_1953) *
     dseg_ne(r_1953, $r2, $r3, r_1945, v_310)
    
 |-  | 
    (v_309 = nil() * v_311 = **first**
    | LinkedList$java.util.LinkedList(@this:, {list=empty()}) )
    || (v_309 = v_309 * v_311 = v_311
       | LinkedList$java.util.LinkedList(@this:,
                                         {list=app(v_310,
                                               cons(v_309, empty()))})
       )


====================Start rewrites=======================================Finished rewrites====================

Query external prover
Case split on or right!
Foo

====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================

---->r_1946 = numeric_const(0) = length(empty())  *
     r_1957 = v_311 = **second**  * r_1959 = @this: = r0  *
     r_1960 = v_309 = $r4 = $ret_var  *
     r_1966 = (numeric_const(1) + length(v_310)) =
     length(app(v_310, cons(v_309, empty()))) = $i0  *
     r_2001 = numeric_const(1) = length(cons(v_309, empty()))   
     | $i0 != numeric_const(0)
       | dseg_ne(r_1953, $r2, $r3, r_1945, v_310) *
         field($r2,
               <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
               r_1953) *
         field(@this:, <java.util.LinkedList: int size>, $i0) *
         field(@this:, <java.util.AbstractList: int modCount>, r_1949) *
         field(@this:,
               <java.util.LinkedList: java.util.LinkedList$Entry header>, $r2) *
         field($r2,
               <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
               $r3) *
         dseg_ne($r3, r_1945, $r2, $r3, cons(v_309, empty()))
        
     |-  |  False



====================Start rewrites======================Using rule:
length_cons gives r_2026 = (numeric_const(1) + numeric_const(0))  
equal to r_2001 = numeric_const(1) = length(cons(v_309, empty())) 
.
Rewritten to
 r_1946 = numeric_const(0) = length(empty())  *
 r_1957 = v_311 = **second**  * r_1959 = @this: = r0  *
 r_1960 = v_309 = $r4 = $ret_var  *
 r_1966 = ((r_2026 + numeric_const(0)) + length(v_310)) =
 length(app(v_310, cons(v_309, empty()))) = $i0  *
 r_2026 = ((r_2026 + numeric_const(0)) + numeric_const(0)) =
 numeric_const(1) = length(cons(v_309, empty()))   
 | $i0 != numeric_const(0)
   | dseg_ne(r_1953, $r2, $r3, r_1945, v_310) *
     field($r2,
           <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
           r_1953) *
     field(@this:, <java.util.LinkedList: int size>, $i0) *
     field(@this:, <java.util.AbstractList: int modCount>, r_1949) *
     field(@this:, <java.util.LinkedList: java.util.LinkedList$Entry header>,
           $r2) *
     field($r2,
           <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
           $r3) *
     dseg_ne($r3, r_1945, $r2, $r3, cons(v_309, empty()))
    
 |-  |  False


====================Start rewrites======================Rewritten to
 r_1946 = numeric_const(0) = length(empty())  *
 r_1957 = v_311 = **second**  * r_1959 = @this: = r0  *
 r_1960 = v_309 = $r4 = $ret_var  *
 r_1966 = ((r_2026 + numeric_const(0)) + length(v_310)) =
 length(app(v_310, cons(v_309, empty()))) = $i0  *
 r_2026 = ((r_2026 + numeric_const(0)) + numeric_const(0)) =
 numeric_const(1) = length(cons(v_309, empty()))   
 | $i0 != numeric_const(0)
   | dseg_ne(r_1953, $r2, $r3, r_1945, v_310) *
     field($r2,
           <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
           r_1953) *
     field(@this:, <java.util.LinkedList: int size>, $i0) *
     field(@this:, <java.util.AbstractList: int modCount>, r_1949) *
     field(@this:, <java.util.LinkedList: java.util.LinkedList$Entry header>,
           $r2) *
     field($r2,
           <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
           $r3) *
     dseg_ne($r3, r_1945, $r2, $r3, cons(v_309, empty()))
    
 |-  |  False


====================Start rewrites=======================================Finished rewrites====================

Ask external prover to complete proof.
Not an or!
Find plain contradiction:
Ask external prover to complete proof.
Backtracking!
Foo

====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================

---->r_2002 = numeric_const(1) = length(cons(v_309, empty()))  *
     r_2003 = (numeric_const(1) + length(v_310)) =
     length(app(v_310, cons(v_309, empty()))) = $i0  *
     r_2009 = v_309 = $r4 = $ret_var  * r_2010 = @this: = r0  *
     r_2012 = v_311 = **second**  *
     r_2023 = numeric_const(0) = length(empty())   
     | $i0 != numeric_const(0)
       | dseg_ne(r_2016, $r2, $r3, r_2024, v_310) *
         field($r2,
               <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
               r_2016) *
         field(@this:, <java.util.LinkedList: int size>, $i0) *
         field(@this:, <java.util.AbstractList: int modCount>, r_2020) *
         field(@this:,
               <java.util.LinkedList: java.util.LinkedList$Entry header>, $r2) *
         field($r2,
               <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
               $r3) *
         dseg_ne($r3, r_2024, $r2, $r3, cons(v_309, empty()))
        
     |- 
        | LinkedList$java.util.LinkedList(@this:,
                                          {list=app(v_310,
                                                cons(v_309, empty()))})
        

Rule: apf_body_right_LinkedList

Foo

====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================

----->r_2002 = numeric_const(1) = length(cons(v_309, empty()))  *
      r_2009 = v_309 = $r4 = $ret_var  * r_2010 = @this: = r0  *
      r_2012 = v_311 = **second**  *
      r_2023 = numeric_const(0) = length(empty())  *
      r_2035 = length(app(v_310, cons(v_309, empty()))) =
      (numeric_const(1) + length(v_310)) = $i0  
      field(@this:, <java.util.LinkedList: int size>, $i0)
      | $i0 != numeric_const(0)
        | dseg_ne($r3, r_2024, $r2, $r3, cons(v_309, empty())) *
          field($r2,
                <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
                $r3) *
          field(@this:,
                <java.util.LinkedList: java.util.LinkedList$Entry header>,
                $r2) *
          field(@this:, <java.util.AbstractList: int modCount>, r_2020) *
          field($r2,
                <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
                r_2016) *
          dseg_ne(r_2016, $r2, $r3, r_2024, v_310)
         
      |- 
         | AbstractSequentialList$java.util.AbstractSequentialList(@this:,
                                                                   {modCount=r_2033}) *
           field(@this:,
                 <java.util.LinkedList: java.util.LinkedList$Entry header>,
                 r_2030) *
           field(r_2030,
                 <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
                 r_2031) *
           field(r_2030,
                 <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
                 r_2029) *
           dseg(r_2031, r_2030, r_2030, r_2029,
                app(v_310, cons(v_309, empty())))
         

Rule: field_remove1

Foo

====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================

------>r_2002 = numeric_const(1) = length(cons(v_309, empty()))  *
       r_2009 = v_309 = $r4 = $ret_var  * r_2010 = @this: = r0  *
       r_2012 = v_311 = **second**  *
       r_2023 = numeric_const(0) = length(empty())  *
       r_2035 = length(app(v_310, cons(v_309, empty()))) =
       (numeric_const(1) + length(v_310)) = $i0  
       field(@this:,
             <java.util.LinkedList: java.util.LinkedList$Entry header>, $r2)*
       field(@this:, <java.util.LinkedList: int size>, $i0)
       | $i0 != numeric_const(0)
         | dseg_ne(r_2016, $r2, $r3, r_2024, v_310) *
           field($r2,
                 <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
                 r_2016) *
           field(@this:, <java.util.AbstractList: int modCount>, r_2020) *
           dseg_ne($r3, r_2024, $r2, $r3, cons(v_309, empty())) *
           field($r2,
                 <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
                 $r3)
          
       |- 
          | AbstractSequentialList$java.util.AbstractSequentialList(@this:,
                                                                    {modCount=r_2033}) *
            field($r2,
                  <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
                  r_2031) *
            field($r2,
                  <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
                  r_2029) *
            dseg(r_2031, $r2, $r2, r_2029, app(v_310, cons(v_309, empty())))
          

Rule: field_remove1

Foo

====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================

------->r_2002 = numeric_const(1) = length(cons(v_309, empty()))  *
        r_2009 = v_309 = $r4 = $ret_var  * r_2010 = @this: = r0  *
        r_2012 = v_311 = **second**  *
        r_2023 = numeric_const(0) = length(empty())  *
        r_2035 = length(app(v_310, cons(v_309, empty()))) =
        (numeric_const(1) + length(v_310)) = $i0  
        field($r2,
              <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
              r_2016)*
        field(@this:,
              <java.util.LinkedList: java.util.LinkedList$Entry header>, $r2)*
        field(@this:, <java.util.LinkedList: int size>, $i0)
        | $i0 != numeric_const(0)
          | field($r2,
                  <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
                  $r3) *
            dseg_ne($r3, r_2024, $r2, $r3, cons(v_309, empty())) *
            field(@this:, <java.util.AbstractList: int modCount>, r_2020) *
            dseg_ne(r_2016, $r2, $r3, r_2024, v_310)
           
        |- 
           | AbstractSequentialList$java.util.AbstractSequentialList(
             @this:, {modCount=r_2033}) *
             field($r2,
                   <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
                   r_2029) *
             dseg(r_2016, $r2, $r2, r_2029, app(v_310, cons(v_309, empty())))
           

Rule: field_remove1

Foo

====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================

-------->r_2002 = numeric_const(1) = length(cons(v_309, empty()))  *
         r_2009 = v_309 = $r4 = $ret_var  * r_2010 = @this: = r0  *
         r_2012 = v_311 = **second**  *
         r_2023 = numeric_const(0) = length(empty())  *
         r_2035 = length(app(v_310, cons(v_309, empty()))) =
         (numeric_const(1) + length(v_310)) = $i0  
         field($r2,
               <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
               $r3)*
         field($r2,
               <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
               r_2016)*
         field(@this:,
               <java.util.LinkedList: java.util.LinkedList$Entry header>, $r2)*
         field(@this:, <java.util.LinkedList: int size>, $i0)
         | $i0 != numeric_const(0)
           | dseg_ne(r_2016, $r2, $r3, r_2024, v_310) *
             field(@this:, <java.util.AbstractList: int modCount>, r_2020) *
             dseg_ne($r3, r_2024, $r2, $r3, cons(v_309, empty()))
            
         |- 
            | AbstractSequentialList$java.util.AbstractSequentialList(
              @this:, {modCount=r_2033}) *
              dseg(r_2016, $r2, $r2, $r3, app(v_310, cons(v_309, empty())))
            

Rule: dseg_disj_right

Foo

====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================

--------->r_2002 = numeric_const(1) = length(cons(v_309, empty()))  *
          r_2009 = v_309 = $r4 = $ret_var  * r_2010 = @this: = r0  *
          r_2012 = v_311 = **second**  *
          r_2023 = numeric_const(0) = length(empty())  *
          r_2035 = length(app(v_310, cons(v_309, empty()))) =
          (numeric_const(1) + length(v_310)) = $i0  
          field($r2,
                <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
                $r3)*
          field($r2,
                <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
                r_2016)*
          field(@this:,
                <java.util.LinkedList: java.util.LinkedList$Entry header>,
                $r2)*
          field(@this:, <java.util.LinkedList: int size>, $i0)
          | $i0 != numeric_const(0)
            | dseg_ne($r3, r_2024, $r2, $r3, cons(v_309, empty())) *
              field(@this:, <java.util.AbstractList: int modCount>, r_2020) *
              dseg_ne(r_2016, $r2, $r3, r_2024, v_310)
             
          |- 
             | AbstractSequentialList$java.util.AbstractSequentialList(
               @this:, {modCount=r_2033})
             (app(v_310, cons(v_309, empty())) = empty() * r_2016 = $r2 *
              $r3 = $r2
             |  )
             || (
                | dseg_ne(r_2016, $r2, $r2, $r3,
                          app(v_310, cons(v_309, empty())))
                )

Rule: apf_body_right_AbstractSequentialList

Foo

====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================

---------->r_2002 = numeric_const(1) = length(cons(v_309, empty()))  *
           r_2009 = v_309 = $r4 = $ret_var  * r_2010 = @this: = r0  *
           r_2012 = v_311 = **second**  *
           r_2023 = numeric_const(0) = length(empty())  *
           r_2035 = length(app(v_310, cons(v_309, empty()))) =
           (numeric_const(1) + length(v_310)) = $i0  
           field($r2,
                 <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
                 $r3)*
           field($r2,
                 <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
                 r_2016)*
           field(@this:,
                 <java.util.LinkedList: java.util.LinkedList$Entry header>,
                 $r2)*
           field(@this:, <java.util.LinkedList: int size>, $i0)
           | $i0 != numeric_const(0)
             | dseg_ne(r_2016, $r2, $r3, r_2024, v_310) *
               field(@this:, <java.util.AbstractList: int modCount>, r_2020) *
               dseg_ne($r3, r_2024, $r2, $r3, cons(v_309, empty()))
              
           |- 
              | AbstractList$java.util.AbstractList(@this:, {modCount=r_2036})
              (app(v_310, cons(v_309, empty())) = empty() * r_2016 = $r2 *
               $r3 = $r2
              |  )
              || (
                 | dseg_ne(r_2016, $r2, $r2, $r3,
                           app(v_310, cons(v_309, empty())))
                 )

Rule: apf_body_right_AbstractList

Foo

====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================

----------->r_2002 = numeric_const(1) = length(cons(v_309, empty()))  *
            r_2009 = v_309 = $r4 = $ret_var  * r_2010 = @this: = r0  *
            r_2012 = v_311 = **second**  *
            r_2023 = numeric_const(0) = length(empty())  *
            r_2035 = length(app(v_310, cons(v_309, empty()))) =
            (numeric_const(1) + length(v_310)) = $i0  
            field($r2,
                  <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
                  $r3)*
            field($r2,
                  <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
                  r_2016)*
            field(@this:,
                  <java.util.LinkedList: java.util.LinkedList$Entry header>,
                  $r2)*
            field(@this:, <java.util.LinkedList: int size>, $i0)
            | $i0 != numeric_const(0)
              | dseg_ne($r3, r_2024, $r2, $r3, cons(v_309, empty())) *
                field(@this:, <java.util.AbstractList: int modCount>, r_2020) *
                dseg_ne(r_2016, $r2, $r3, r_2024, v_310)
               
            |- 
               | field(@this:, <java.util.AbstractList: int modCount>, r_2038)
               (app(v_310, cons(v_309, empty())) = empty() * r_2016 = $r2 *
                $r3 = $r2
               |  )
               || (
                  | dseg_ne(r_2016, $r2, $r2, $r3,
                            app(v_310, cons(v_309, empty())))
                  )

Rule: field_remove1

Foo

====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================

------------>r_2002 = numeric_const(1) = length(cons(v_309, empty()))  *
             r_2009 = v_309 = $r4 = $ret_var  * r_2010 = @this: = r0  *
             r_2012 = v_311 = **second**  *
             r_2023 = numeric_const(0) = length(empty())  *
             r_2035 = length(app(v_310, cons(v_309, empty()))) =
             (numeric_const(1) + length(v_310)) = $i0  
             field(@this:, <java.util.AbstractList: int modCount>, r_2020)*
             field($r2,
                   <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
                   $r3)*
             field($r2,
                   <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
                   r_2016)*
             field(@this:,
                   <java.util.LinkedList: java.util.LinkedList$Entry header>,
                   $r2)*
             field(@this:, <java.util.LinkedList: int size>, $i0)
             | $i0 != numeric_const(0)
               | dseg_ne(r_2016, $r2, $r3, r_2024, v_310) *
                 dseg_ne($r3, r_2024, $r2, $r3, cons(v_309, empty()))
                
             |-  | 
                (app(v_310, cons(v_309, empty())) = empty() * r_2016 = $r2 *
                 $r3 = $r2
                |  )
                || (
                   | dseg_ne(r_2016, $r2, $r2, $r3,
                             app(v_310, cons(v_309, empty())))
                   )



====================Start rewrites======================Using rule:
length_cons gives r_2040 = (numeric_const(1) + numeric_const(0))  
equal to r_2002 = numeric_const(1) = length(cons(v_309, empty())) 
.
Rewritten to
 r_2009 = v_309 = $r4 = $ret_var  * r_2010 = @this: = r0  *
 r_2012 = v_311 = **second**  *
 r_2023 = numeric_const(0) = length(empty())  *
 r_2035 = length(app(v_310, cons(v_309, empty()))) =
 ((r_2040 + numeric_const(0)) + length(v_310)) = $i0  *
 r_2040 = ((r_2040 + numeric_const(0)) + numeric_const(0)) =
 numeric_const(1) = length(cons(v_309, empty()))  
 field(@this:, <java.util.AbstractList: int modCount>, r_2020)*
 field($r2,
       <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>, $r3)*
 field($r2, <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
       r_2016)*
 field(@this:, <java.util.LinkedList: java.util.LinkedList$Entry header>, $r2)*
 field(@this:, <java.util.LinkedList: int size>, $i0)
 | $i0 != numeric_const(0)
   | dseg_ne(r_2016, $r2, $r3, r_2024, v_310) *
     dseg_ne($r3, r_2024, $r2, $r3, cons(v_309, empty()))
    
 |-  | 
    (app(v_310, cons(v_309, empty())) = empty() * r_2016 = $r2 * $r3 = $r2 | 
     )
    || ( | dseg_ne(r_2016, $r2, $r2, $r3, app(v_310, cons(v_309, empty()))) )


====================Start rewrites======================Rewritten to
 r_2009 = v_309 = $r4 = $ret_var  * r_2010 = @this: = r0  *
 r_2012 = v_311 = **second**  *
 r_2023 = numeric_const(0) = length(empty())  *
 r_2035 = length(app(v_310, cons(v_309, empty()))) =
 ((r_2040 + numeric_const(0)) + length(v_310)) = $i0  *
 r_2040 = ((r_2040 + numeric_const(0)) + numeric_const(0)) =
 numeric_const(1) = length(cons(v_309, empty()))  
 field(@this:, <java.util.AbstractList: int modCount>, r_2020)*
 field($r2,
       <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>, $r3)*
 field($r2, <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
       r_2016)*
 field(@this:, <java.util.LinkedList: java.util.LinkedList$Entry header>, $r2)*
 field(@this:, <java.util.LinkedList: int size>, $i0)
 | $i0 != numeric_const(0)
   | dseg_ne(r_2016, $r2, $r3, r_2024, v_310) *
     dseg_ne($r3, r_2024, $r2, $r3, cons(v_309, empty()))
    
 |-  | 
    (app(v_310, cons(v_309, empty())) = empty() * r_2016 = $r2 * $r3 = $r2 | 
     )
    || ( | dseg_ne(r_2016, $r2, $r2, $r3, app(v_310, cons(v_309, empty()))) )


====================Start rewrites=======================================Finished rewrites====================

Query external prover
Case split on or right!
Foo

====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================

------------->r_2009 = v_309 = $r4 = $ret_var  * r_2010 = @this: = r0  *
              r_2012 = v_311 = **second**  *
              r_2023 = numeric_const(0) = length(empty())  *
              r_2035 = length(app(v_310, cons(v_309, empty()))) =
              (numeric_const(1) + length(v_310)) = $i0  *
              r_2040 = numeric_const(1) = length(cons(v_309, empty()))  
              field(@this:, <java.util.AbstractList: int modCount>, r_2020)*
              field($r2,
                    <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
                    $r3)*
              field($r2,
                    <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
                    r_2016)*
              field(@this:,
                    <java.util.LinkedList: java.util.LinkedList$Entry header>,
                    $r2)*
              field(@this:, <java.util.LinkedList: int size>, $i0)
              | $i0 != numeric_const(0)
                | dseg_ne($r3, r_2024, $r2, $r3, cons(v_309, empty())) *
                  dseg_ne(r_2016, $r2, $r3, r_2024, v_310)
                 
              |- app(v_310, cons(v_309, empty())) = empty() * r_2016 = $r2 *
                 $r3 = $r2 |  

Rule: app_is_emp1_right

Foo

====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================

-------------->r_2009 = v_309 = $r4 = $ret_var  * r_2010 = @this: = r0  *
               r_2012 = v_311 = **second**  *
               r_2023 = numeric_const(0) = length(empty())  *
               r_2035 = length(app(v_310, cons(v_309, empty()))) =
               (numeric_const(1) + length(v_310)) = $i0  *
               r_2040 = numeric_const(1) = length(cons(v_309, empty()))  
               field(@this:, <java.util.AbstractList: int modCount>, r_2020)*
               field($r2,
                     <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
                     $r3)*
               field($r2,
                     <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
                     r_2016)*
               field(@this:,
                     <java.util.LinkedList: java.util.LinkedList$Entry header>,
                     $r2)*
               field(@this:, <java.util.LinkedList: int size>, $i0)
               | $i0 != numeric_const(0)
                 | dseg_ne(r_2016, $r2, $r3, r_2024, v_310) *
                   dseg_ne($r3, r_2024, $r2, $r3, cons(v_309, empty()))
                  
               |- v_310 = empty() * cons(v_309, empty()) = empty() *
                  r_2016 = $r2 * $r3 = $r2 |  

Rule: cons_empty_eq_right

Foo

====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================

--------------->r_2009 = v_309 = $r4 = $ret_var  * r_2010 = @this: = r0  *
                r_2012 = v_311 = **second**  *
                r_2023 = numeric_const(0) = length(empty())  *
                r_2035 = length(app(v_310, cons(v_309, empty()))) =
                (numeric_const(1) + length(v_310)) = $i0  *
                r_2040 = numeric_const(1) = length(cons(v_309, empty()))  
                field(@this:, <java.util.AbstractList: int modCount>, r_2020)*
                field($r2,
                      <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
                      $r3)*
                field($r2,
                      <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
                      r_2016)*
                field(@this:,
                      <java.util.LinkedList: java.util.LinkedList$Entry header>,
                      $r2)*
                field(@this:, <java.util.LinkedList: int size>, $i0)
                | $i0 != numeric_const(0)
                  | dseg_ne($r3, r_2024, $r2, $r3, cons(v_309, empty())) *
                    dseg_ne(r_2016, $r2, $r3, r_2024, v_310)
                   
                |-  |  False



====================Start rewrites======================Using rule:
length_cons gives r_2064 = (numeric_const(1) + numeric_const(0))  
equal to r_2040 = numeric_const(1) = length(cons(v_309, empty())) 
.
Rewritten to
 r_2009 = v_309 = $r4 = $ret_var  * r_2010 = @this: = r0  *
 r_2012 = v_311 = **second**  *
 r_2023 = numeric_const(0) = length(empty())  *
 r_2035 = length(app(v_310, cons(v_309, empty()))) =
 ((r_2064 + numeric_const(0)) + length(v_310)) = $i0  *
 r_2064 = ((r_2064 + numeric_const(0)) + numeric_const(0)) =
 numeric_const(1) = length(cons(v_309, empty()))  
 field(@this:, <java.util.AbstractList: int modCount>, r_2020)*
 field($r2,
       <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>, $r3)*
 field($r2, <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
       r_2016)*
 field(@this:, <java.util.LinkedList: java.util.LinkedList$Entry header>, $r2)*
 field(@this:, <java.util.LinkedList: int size>, $i0)
 | $i0 != numeric_const(0)
   | dseg_ne($r3, r_2024, $r2, $r3, cons(v_309, empty())) *
     dseg_ne(r_2016, $r2, $r3, r_2024, v_310)
    
 |-  |  False


====================Start rewrites======================Rewritten to
 r_2009 = v_309 = $r4 = $ret_var  * r_2010 = @this: = r0  *
 r_2012 = v_311 = **second**  *
 r_2023 = numeric_const(0) = length(empty())  *
 r_2035 = length(app(v_310, cons(v_309, empty()))) =
 ((r_2064 + numeric_const(0)) + length(v_310)) = $i0  *
 r_2064 = ((r_2064 + numeric_const(0)) + numeric_const(0)) =
 numeric_const(1) = length(cons(v_309, empty()))  
 field(@this:, <java.util.AbstractList: int modCount>, r_2020)*
 field($r2,
       <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>, $r3)*
 field($r2, <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
       r_2016)*
 field(@this:, <java.util.LinkedList: java.util.LinkedList$Entry header>, $r2)*
 field(@this:, <java.util.LinkedList: int size>, $i0)
 | $i0 != numeric_const(0)
   | dseg_ne($r3, r_2024, $r2, $r3, cons(v_309, empty())) *
     dseg_ne(r_2016, $r2, $r3, r_2024, v_310)
    
 |-  |  False


====================Start rewrites=======================================Finished rewrites====================

Ask external prover to complete proof.
Not an or!
Find plain contradiction:
Ask external prover to complete proof.
Backtracking!
Backtracking!
Backtracking!
Foo

====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================

------------->r_2041 = numeric_const(1) = length(cons(v_309, empty()))  *
              r_2042 = length(app(v_310, cons(v_309, empty()))) =
              (numeric_const(1) + length(v_310)) = $i0  *
              r_2045 = numeric_const(0) = length(empty())  *
              r_2055 = v_311 = **second**  * r_2057 = @this: = r0  *
              r_2058 = v_309 = $r4 = $ret_var  
              field(@this:, <java.util.AbstractList: int modCount>, r_2048)*
              field($r2,
                    <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
                    $r3)*
              field($r2,
                    <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
                    r_2052)*
              field(@this:,
                    <java.util.LinkedList: java.util.LinkedList$Entry header>,
                    $r2)*
              field(@this:, <java.util.LinkedList: int size>, $i0)
              | $i0 != numeric_const(0)
                | dseg_ne($r3, r_2044, $r2, $r3, cons(v_309, empty())) *
                  dseg_ne(r_2052, $r2, $r3, r_2044, v_310)
                 
              |- 
                 | dseg_ne(r_2052, $r2, $r2, $r3,
                           app(v_310, cons(v_309, empty())))
                 

Rule: dseg_app_rollup_left2

Foo

====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================

-------------->r_2041 = numeric_const(1) = length(cons(v_309, empty()))  *
               r_2042 = length(app(v_310, cons(v_309, empty()))) =
               (numeric_const(1) + length(v_310)) = $i0  *
               r_2045 = numeric_const(0) = length(empty())  *
               r_2055 = v_311 = **second**  * r_2057 = @this: = r0  *
               r_2058 = v_309 = $r4 = $ret_var  
               dseg_ne(r_2052, $r2, $r3, r_2044, v_310)*
               dseg_ne($r3, r_2044, $r2, $r3, cons(v_309, empty()))*
               field(@this:, <java.util.AbstractList: int modCount>, r_2048)*
               field($r2,
                     <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
                     $r3)*
               field($r2,
                     <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
                     r_2052)*
               field(@this:,
                     <java.util.LinkedList: java.util.LinkedList$Entry header>,
                     $r2)*
               field(@this:, <java.util.LinkedList: int size>, $i0)
               | $i0 != numeric_const(0) |    |-  |  



====================Start rewrites======================Using rule:
length_cons gives r_2065 = (numeric_const(1) + numeric_const(0))  
equal to r_2041 = numeric_const(1) = length(cons(v_309, empty())) 
.
Rewritten to
 r_2042 = length(app(v_310, cons(v_309, empty()))) =
 ((r_2065 + numeric_const(0)) + length(v_310)) = $i0  *
 r_2045 = numeric_const(0) = length(empty())  *
 r_2055 = v_311 = **second**  * r_2057 = @this: = r0  *
 r_2058 = v_309 = $r4 = $ret_var  *
 r_2065 = ((r_2065 + numeric_const(0)) + numeric_const(0)) =
 numeric_const(1) = length(cons(v_309, empty()))  
 dseg_ne(r_2052, $r2, $r3, r_2044, v_310)*
 dseg_ne($r3, r_2044, $r2, $r3, cons(v_309, empty()))*
 field(@this:, <java.util.AbstractList: int modCount>, r_2048)*
 field($r2,
       <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>, $r3)*
 field($r2, <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
       r_2052)*
 field(@this:, <java.util.LinkedList: java.util.LinkedList$Entry header>, $r2)*
 field(@this:, <java.util.LinkedList: int size>, $i0)
 | $i0 != numeric_const(0) |    |-  |  


====================Start rewrites======================Rewritten to
 r_2042 = length(app(v_310, cons(v_309, empty()))) =
 ((r_2065 + numeric_const(0)) + length(v_310)) = $i0  *
 r_2045 = numeric_const(0) = length(empty())  *
 r_2055 = v_311 = **second**  * r_2057 = @this: = r0  *
 r_2058 = v_309 = $r4 = $ret_var  *
 r_2065 = ((r_2065 + numeric_const(0)) + numeric_const(0)) =
 numeric_const(1) = length(cons(v_309, empty()))  
 dseg_ne(r_2052, $r2, $r3, r_2044, v_310)*
 dseg_ne($r3, r_2044, $r2, $r3, cons(v_309, empty()))*
 field(@this:, <java.util.AbstractList: int modCount>, r_2048)*
 field($r2,
       <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>, $r3)*
 field($r2, <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
       r_2052)*
 field(@this:, <java.util.LinkedList: java.util.LinkedList$Entry header>, $r2)*
 field(@this:, <java.util.LinkedList: int size>, $i0)
 | $i0 != numeric_const(0) |    |-  |  


====================Start rewrites=======================================Finished rewrites====================

End time :0.784048 
