
---------------------------------------------------------
Goal
r_6622 = @this: = r0  * r_6624 = v_341 = cons(r_6634, r_6636)  *
r_6626 = $r3 = $r4  * r_6635 = r2 = r1  * r_6638 = nil() = $n0   
| 
  | field(@this:, <java.util.LinkedList: java.util.LinkedList$Entry header>,
          $r3) *
    field($r3,
          <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
          r_6625) *
    field(@this:, <java.util.AbstractList: int modCount>, r_6632) *
    field(@this:, <java.util.LinkedList: int size>, length(v_341)) *
    field($r3, <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
          r_6627) *
    dseg_ne(r_6627, nil(), nil(), r_6627, cons(nil(), empty()))
  (r_6636 = empty() * r2 = $r3 * r_6625 = r_6627 |  )
  || ( | dseg_ne(r2, r_6627, $r3, r_6625, r_6636) ) 
|- <java.util.AbstractList: int modCount> = r_6651 * empty() = r_6649 *
   length(r_6641) = r_6648 * <java.util.LinkedList: int size> = r_6647 *
   <java.util.LinkedList$Entry: java.util.LinkedList$Entry next> = r_6646 *
   <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous> = r_6645 *
   r2 = r_6644 * $r3 = r_6643 * v_341 = r_6641 *
   <java.util.LinkedList: java.util.LinkedList$Entry header> = r_6640 *
   @this: = r_6639 * @this: = r_6639
   | field(r_6643, r_6645, r_6642) * field(r_6639, r_6651, r_6650) *
     field(r_6639, r_6647, r_6648) * field(r_6639, r_6640, r_6643) *
     field(r_6643, r_6646, r_6644)
   (r_6641 = r_6649 * r_6644 = r_6643 * r_6642 = r_6643 |  )
   || ( | dseg_ne(r_6644, r_6643, r_6643, r_6642, r_6641) )

Start time :2.960184 
Foo

====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================

>r_6622 = @this: = r0  * r_6624 = v_341 = cons(r_6634, r_6636)  *
 r_6626 = $r3 = $r4  * r_6635 = r2 = r1  * r_6638 = nil() = $n0  
 field(@this:, <java.util.LinkedList: int size>, length(v_341))*
 field(@this:, <java.util.LinkedList: java.util.LinkedList$Entry header>, $r3)
 | 
   | dseg_ne(r_6627, nil(), nil(), r_6627, cons(nil(), empty())) *
     field($r3,
           <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
           r_6627) *
     field(@this:, <java.util.AbstractList: int modCount>, r_6632) *
     field($r3,
           <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
           r_6625)
   (r_6636 = empty() * r2 = $r3 * r_6625 = r_6627 |  )
   || ( | dseg_ne(r2, r_6627, $r3, r_6625, r_6636) ) 
 |- 
    | field($r3,
            <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
            r_6642) *
      field(@this:, <java.util.AbstractList: int modCount>, r_6650) *
      field($r3,
            <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>, r2)
    (v_341 = empty() * r2 = $r3 * r_6642 = $r3 |  )
    || ( | dseg_ne(r2, $r3, $r3, r_6642, v_341) )

Rule: field_remove1

Foo

====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================

->r_6622 = @this: = r0  * r_6624 = v_341 = cons(r_6634, r_6636)  *
  r_6626 = $r3 = $r4  * r_6635 = r2 = r1  * r_6638 = nil() = $n0  
  field($r3,
        <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
        r_6625)*
  field(@this:, <java.util.LinkedList: int size>, length(v_341))*
  field(@this:, <java.util.LinkedList: java.util.LinkedList$Entry header>,
        $r3)
  | 
    | dseg_ne(r_6627, nil(), nil(), r_6627, cons(nil(), empty())) *
      field($r3,
            <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
            r_6627) *
      field(@this:, <java.util.AbstractList: int modCount>, r_6632)
    (r_6636 = empty() * r2 = $r3 * r_6625 = r_6627 |  )
    || ( | dseg_ne(r2, r_6627, $r3, r_6625, r_6636) ) 
  |- 
     | field(@this:, <java.util.AbstractList: int modCount>, r_6650) *
       field($r3,
             <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
             r2)
     (v_341 = empty() * r2 = $r3 * r_6625 = $r3 |  )
     || ( | dseg_ne(r2, $r3, $r3, r_6625, v_341) )

Rule: field_remove1

Foo

====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================

-->r_6622 = @this: = r0  * r_6624 = v_341 = cons(r_6634, r_6636)  *
   r_6626 = $r3 = $r4  * r_6635 = r2 = r1  * r_6638 = nil() = $n0  
   field(@this:, <java.util.AbstractList: int modCount>, r_6632)*
   field($r3,
         <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
         r_6625)*
   field(@this:, <java.util.LinkedList: int size>, length(v_341))*
   field(@this:, <java.util.LinkedList: java.util.LinkedList$Entry header>,
         $r3)
   | 
     | dseg_ne(r_6627, nil(), nil(), r_6627, cons(nil(), empty())) *
       field($r3,
             <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
             r_6627)
     (r_6636 = empty() * r2 = $r3 * r_6625 = r_6627 |  )
     || ( | dseg_ne(r2, r_6627, $r3, r_6625, r_6636) ) 
   |- 
      | field($r3,
              <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
              r2)
      (v_341 = empty() * r2 = $r3 * r_6625 = $r3 |  )
      || ( | dseg_ne(r2, $r3, $r3, r_6625, v_341) )

Rule: field_remove1

Foo

====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================

--->r_6622 = @this: = r0  * r_6624 = v_341 = cons(r_6634, r_6636)  *
    r_6626 = $r3 = $r4  * r_6635 = r2 = r1  * r_6638 = nil() = $n0  
    field($r3, <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
          r_6627)*
    field(@this:, <java.util.AbstractList: int modCount>, r_6632)*
    field($r3,
          <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
          r_6625)*
    field(@this:, <java.util.LinkedList: int size>, length(v_341))*
    field(@this:, <java.util.LinkedList: java.util.LinkedList$Entry header>,
          $r3)
    |  | dseg_ne(r_6627, nil(), nil(), r_6627, cons(nil(), empty()))
      (r_6636 = empty() * r2 = $r3 * r_6625 = r_6627 |  )
      || ( | dseg_ne(r2, r_6627, $r3, r_6625, r_6636) ) 
    |- r_6627 = r2 | 
       (v_341 = empty() * r2 = $r3 * r_6625 = $r3 |  )
       || ( | dseg_ne(r2, $r3, $r3, r_6625, v_341) )



====================Start rewrites======================Using rule:
length_cons gives r_6656 = (numeric_const(1) + length(r_6636))  
equal to r_6637 = length(v_341) 
.
Rewritten to
 r_6622 = @this: = r0  * r_6624 = v_341 = cons(r_6634, r_6636)  *
 r_6626 = $r3 = $r4  * r_6635 = r2 = r1  * r_6638 = nil() = $n0  *
 r_6656 = (numeric_const(1) + length(r_6636)) = length(v_341)  
 field($r3, <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
       r_6627)*
 field(@this:, <java.util.AbstractList: int modCount>, r_6632)*
 field($r3,
       <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
       r_6625)*
 field(@this:, <java.util.LinkedList: int size>,
       (numeric_const(1) + length(r_6636)))*
 field(@this:, <java.util.LinkedList: java.util.LinkedList$Entry header>, $r3)
 |  | dseg_ne(r_6627, nil(), nil(), r_6627, cons(nil(), empty()))
   (r_6636 = empty() * r2 = $r3 * r_6625 = r_6627 |  )
   || ( | dseg_ne(r2, r_6627, $r3, r_6625, r_6636) ) 
 |- r_6627 = r2 | 
    (v_341 = empty() * r2 = $r3 * r_6625 = $r3 |  )
    || ( | dseg_ne(r2, $r3, $r3, r_6625, v_341) )


====================Start rewrites=======================================Finished rewrites====================

Query external prover
FooElim eqs : r_6636 = empty() * r2 = $r3 *
r_6625 = r_6627


====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================

---->r_6622 = @this: = r0  * r_6624 = v_341 = cons(r_6634, empty())  *
     r_6635 = r2 = r1 = $r3 = $r4  * r_6638 = nil() = $n0  *
     r_6656 = (numeric_const(1) + length(empty())) = length(v_341)  
     field(r2, <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
           r_6625)*
     field(@this:, <java.util.AbstractList: int modCount>, r_6632)*
     field(r2,
           <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
           r_6625)*
     field(@this:, <java.util.LinkedList: int size>,
           (numeric_const(1) + length(empty())))*
     field(@this:, <java.util.LinkedList: java.util.LinkedList$Entry header>,
           r2)
     |  | dseg_ne(r_6625, nil(), nil(), r_6625, cons(nil(), empty()))  
     |- r_6625 = r2 | 
        (v_341 = empty() * r2 = r2 * r_6625 = r2 |  )
        || ( | dseg_ne(r2, r2, r2, r_6625, v_341) )



====================Start rewrites======================Using rule:
length_empty gives r_6679 = numeric_const(0)  
equal to r_6653 = length(empty()) 
.
Rewritten to
 r_6622 = @this: = r0  * r_6624 = v_341 = cons(r_6634, empty())  *
 r_6635 = r2 = r1 = $r3 = $r4  * r_6638 = nil() = $n0  *
 r_6656 = (numeric_const(1) + numeric_const(0)) = length(v_341)  *
 r_6679 = numeric_const(0) = length(empty())  
 field(r2, <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
       r_6625)*
 field(@this:, <java.util.AbstractList: int modCount>, r_6632)*
 field(r2, <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
       r_6625)*
 field(@this:, <java.util.LinkedList: int size>,
       (numeric_const(1) + numeric_const(0)))*
 field(@this:, <java.util.LinkedList: java.util.LinkedList$Entry header>, r2)
 |  | dseg_ne(r_6625, nil(), nil(), r_6625, cons(nil(), empty()))  
 |- r_6625 = r2 | 
    (v_341 = empty() * r2 = r2 * r_6625 = r2 |  )
    || ( | dseg_ne(r2, r2, r2, r_6625, v_341) )


====================Start rewrites======================Using rule:
plus_zero_second gives r_6655 = numeric_const(1)  
equal to r_6656 = (numeric_const(1) + numeric_const(0)) = length(v_341) 
.
Rewritten to
 r_6622 = @this: = r0  * r_6624 = v_341 = cons(r_6634, empty())  *
 r_6635 = r2 = r1 = $r3 = $r4  * r_6638 = nil() = $n0  *
 r_6655 = numeric_const(1) = (numeric_const(1) + numeric_const(0)) =
 length(v_341)  * r_6679 = numeric_const(0) = length(empty())  
 field(r2, <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
       r_6625)*
 field(@this:, <java.util.AbstractList: int modCount>, r_6632)*
 field(r2, <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
       r_6625)*
 field(@this:, <java.util.LinkedList: int size>, numeric_const(1))*
 field(@this:, <java.util.LinkedList: java.util.LinkedList$Entry header>, r2)
 |  | dseg_ne(r_6625, nil(), nil(), r_6625, cons(nil(), empty()))  
 |- r_6625 = r2 | 
    (v_341 = empty() * r2 = r2 * r_6625 = r2 |  )
    || ( | dseg_ne(r2, r2, r2, r_6625, v_341) )


====================Start rewrites=======================================Finished rewrites====================

Query external prover
Case split on or right!
Foo

====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================

----->r_6622 = @this: = r0  * r_6624 = v_341 = cons(r_6634, empty())  *
      r_6635 = r2 = r1 = $r3 = $r4  * r_6638 = nil() = $n0  *
      r_6655 = numeric_const(1) = length(v_341)  *
      r_6679 = numeric_const(0) = length(empty())  
      field(r2,
            <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
            r_6625)*
      field(@this:, <java.util.AbstractList: int modCount>, r_6632)*
      field(r2,
            <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
            r_6625)*
      field(@this:, <java.util.LinkedList: int size>, numeric_const(1))*
      field(@this:,
            <java.util.LinkedList: java.util.LinkedList$Entry header>, r2)
      |  | dseg_ne(r_6625, nil(), nil(), r_6625, cons(nil(), empty()))  
      |- v_341 = empty() * r_6625 = r2 * r_6625 = r2 |  

Rule: cons_empty_eq_right

Foo

====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================

------>r_6622 = @this: = r0  * r_6624 = v_341 = cons(r_6634, empty())  *
       r_6635 = r2 = r1 = $r3 = $r4  * r_6638 = nil() = $n0  *
       r_6655 = numeric_const(1) = length(v_341)  *
       r_6679 = numeric_const(0) = length(empty())  
       field(r2,
             <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
             r_6625)*
       field(@this:, <java.util.AbstractList: int modCount>, r_6632)*
       field(r2,
             <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
             r_6625)*
       field(@this:, <java.util.LinkedList: int size>, numeric_const(1))*
       field(@this:,
             <java.util.LinkedList: java.util.LinkedList$Entry header>, r2)
       |  | dseg_ne(r_6625, nil(), nil(), r_6625, cons(nil(), empty()))  
       |-  |  False



====================Start rewrites======================Using rule:
length_cons gives r_6698 = (numeric_const(1) + numeric_const(0))  
equal to r_6655 = numeric_const(1) = length(v_341) 
.
Rewritten to
 r_6622 = @this: = r0  * r_6624 = v_341 = cons(r_6634, empty())  *
 r_6635 = r2 = r1 = $r3 = $r4  * r_6638 = nil() = $n0  *
 r_6679 = numeric_const(0) = length(empty())  *
 r_6698 = ((r_6698 + numeric_const(0)) + numeric_const(0)) =
 numeric_const(1) = length(v_341)  
 field(r2, <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
       r_6625)*
 field(@this:, <java.util.AbstractList: int modCount>, r_6632)*
 field(r2, <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
       r_6625)*
 field(@this:, <java.util.LinkedList: int size>, (r_6698 + numeric_const(0)))*
 field(@this:, <java.util.LinkedList: java.util.LinkedList$Entry header>, r2)
 |  | dseg_ne(r_6625, nil(), nil(), r_6625, cons(nil(), empty()))  
 |-  |  False


====================Start rewrites======================Rewritten to
 r_6622 = @this: = r0  * r_6624 = v_341 = cons(r_6634, empty())  *
 r_6635 = r2 = r1 = $r3 = $r4  * r_6638 = nil() = $n0  *
 r_6679 = numeric_const(0) = length(empty())  *
 r_6698 = ((r_6698 + numeric_const(0)) + numeric_const(0)) =
 numeric_const(1) = length(v_341)  
 field(r2, <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
       r_6625)*
 field(@this:, <java.util.AbstractList: int modCount>, r_6632)*
 field(r2, <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
       r_6625)*
 field(@this:, <java.util.LinkedList: int size>, (r_6698 + numeric_const(0)))*
 field(@this:, <java.util.LinkedList: java.util.LinkedList$Entry header>, r2)
 |  | dseg_ne(r_6625, nil(), nil(), r_6625, cons(nil(), empty()))  
 |-  |  False


====================Start rewrites=======================================Finished rewrites====================

Ask external prover to complete proof.
Not an or!
Find plain contradiction:
Ask external prover to complete proof.
Backtracking!
Backtracking!
Foo

====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================

----->r_6680 = numeric_const(0) = length(empty())  *
      r_6682 = numeric_const(1) = length(v_341)  * r_6684 = nil() = $n0  *
      r_6686 = r2 = r1 = $r3 = $r4  *
      r_6694 = v_341 = cons(r_6687, empty())  * r_6696 = @this: = r0  
      field(r2,
            <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
            r_6693)*
      field(@this:, <java.util.AbstractList: int modCount>, r_6689)*
      field(r2,
            <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
            r_6693)*
      field(@this:, <java.util.LinkedList: int size>, numeric_const(1))*
      field(@this:,
            <java.util.LinkedList: java.util.LinkedList$Entry header>, r2)
      |  | dseg_ne(r_6693, nil(), nil(), r_6693, cons(nil(), empty()))  
      |- r_6693 = r2 | dseg_ne(r2, r2, r2, r_6693, v_341) 

Rule: dseg_ne_empty2_right

Foo

====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================

------>r_6680 = numeric_const(0) = length(empty())  *
       r_6682 = numeric_const(1) = length(v_341)  * r_6684 = nil() = $n0  *
       r_6686 = r2 = r1 = $r3 = $r4  *
       r_6694 = v_341 = cons(r_6687, empty())  * r_6696 = @this: = r0  
       field(r2,
             <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
             r_6693)*
       field(@this:, <java.util.AbstractList: int modCount>, r_6689)*
       field(r2,
             <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
             r_6693)*
       field(@this:, <java.util.LinkedList: int size>, numeric_const(1))*
       field(@this:,
             <java.util.LinkedList: java.util.LinkedList$Entry header>, r2)
       |  | dseg_ne(r_6693, nil(), nil(), r_6693, cons(nil(), empty()))  
       |-  |  False



====================Start rewrites======================Using rule:
length_cons gives r_6699 = (numeric_const(1) + numeric_const(0))  
equal to r_6682 = numeric_const(1) = length(v_341) 
.
Rewritten to
 r_6680 = numeric_const(0) = length(empty())  * r_6684 = nil() = $n0  *
 r_6686 = r2 = r1 = $r3 = $r4  * r_6694 = v_341 = cons(r_6687, empty())  *
 r_6696 = @this: = r0  *
 r_6699 = ((r_6699 + numeric_const(0)) + numeric_const(0)) =
 numeric_const(1) = length(v_341)  
 field(r2, <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
       r_6693)*
 field(@this:, <java.util.AbstractList: int modCount>, r_6689)*
 field(r2, <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
       r_6693)*
 field(@this:, <java.util.LinkedList: int size>, (r_6699 + numeric_const(0)))*
 field(@this:, <java.util.LinkedList: java.util.LinkedList$Entry header>, r2)
 |  | dseg_ne(r_6693, nil(), nil(), r_6693, cons(nil(), empty()))  
 |-  |  False


====================Start rewrites======================Rewritten to
 r_6680 = numeric_const(0) = length(empty())  * r_6684 = nil() = $n0  *
 r_6686 = r2 = r1 = $r3 = $r4  * r_6694 = v_341 = cons(r_6687, empty())  *
 r_6696 = @this: = r0  *
 r_6699 = ((r_6699 + numeric_const(0)) + numeric_const(0)) =
 numeric_const(1) = length(v_341)  
 field(r2, <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
       r_6693)*
 field(@this:, <java.util.AbstractList: int modCount>, r_6689)*
 field(r2, <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
       r_6693)*
 field(@this:, <java.util.LinkedList: int size>, (r_6699 + numeric_const(0)))*
 field(@this:, <java.util.LinkedList: java.util.LinkedList$Entry header>, r2)
 |  | dseg_ne(r_6693, nil(), nil(), r_6693, cons(nil(), empty()))  
 |-  |  False


====================Start rewrites=======================================Finished rewrites====================

Ask external prover to complete proof.
Not an or!
Find plain contradiction:
Ask external prover to complete proof.
Backtracking!
Backtracking!
Backtracking!
Backtracking!
Backtracking!
