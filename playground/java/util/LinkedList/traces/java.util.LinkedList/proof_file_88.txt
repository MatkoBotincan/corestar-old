
---------------------------------------------------------
Goal
r_9538 = r1 = $r3 = $r4  * r_9542 = @this: = r0   
| 
  | field(r1, <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
          r1) *
    field(@this:, <java.util.LinkedList: int size>, length(v_341)) *
    field(@this:, <java.util.AbstractList: int modCount>, r_9532) *
    field(r1,
          <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
          r_9539) *
    field(@this:, <java.util.LinkedList: java.util.LinkedList$Entry header>,
          r1)
  (v_341 = empty() * r1 = r1 * r_9539 = r1 |  )
  || ( | dseg_ne(r1, r1, r1, r_9539, v_341) ) 
|- cons(r_9544, r_9550) = r_9559 * @this: = r_9558 * @this: = r_9558 *
   <java.util.LinkedList: java.util.LinkedList$Entry header> = r_9557 *
   cons(r_9547, r_9545) = r_9556 * v_341 = r_9556 *
   <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous> = r_9553 *
   <java.util.LinkedList$Entry: java.util.LinkedList$Entry next> = r_9552 *
   <java.util.LinkedList: int size> = r_9551 * empty() = r_9550 *
   <java.util.AbstractList: int modCount> = r_9548 * r1 = r_9546 *
   r1 = r_9546 * r1 = r_9546 * r2 = r_9546 * $n0 = r_9544 * nil() = r_9544 *
   length(r_9556) = r_9543
   | field(r_9546, r_9553, r_9555) * field(r_9558, r_9548, r_9549) *
     field(r_9558, r_9551, r_9543) * field(r_9546, r_9552, r_9554) *
     dseg_ne(r_9554, r_9544, r_9544, r_9554, r_9559) *
     field(r_9558, r_9557, r_9546)
   (r_9545 = r_9550 * r_9546 = r_9546 * r_9555 = r_9554 |  )
   || ( | dseg_ne(r_9546, r_9554, r_9546, r_9555, r_9545) )

Start time :4.424275 
Foo

====================Start rewrites======================Using rule:
length_cons gives r_9569 = (numeric_const(1) + length(r_9545))  
equal to r_9560 = length(cons(r_9547, r_9545)) 
.
Rewritten to
 r_9538 = r1 = $r3 = $r4  * r_9542 = @this: = r0  *
 r_9569 = (numeric_const(1) + length(r_9545)) = length(cons(r_9547, r_9545)) 
   | 
     | field(r1,
             <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
             r1) *
       field(@this:, <java.util.LinkedList: int size>, length(v_341)) *
       field(@this:, <java.util.AbstractList: int modCount>, r_9532) *
       field(r1,
             <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
             r_9539) *
       field(@this:,
             <java.util.LinkedList: java.util.LinkedList$Entry header>, r1)
     (v_341 = empty() * r1 = r1 * r_9539 = r1 |  )
     || ( | dseg_ne(r1, r1, r1, r_9539, v_341) ) 
 |- (numeric_const(1) + length(r_9545)) = (numeric_const(1) + length(r_9545)) *
    nil() = $n0 * $n0 = $n0 * r2 = r1 * r1 = r1 *
    <java.util.AbstractList: int modCount> = <java.util.AbstractList: int modCount> *
    empty() = empty() *
    <java.util.LinkedList: int size> = <java.util.LinkedList: int size> *
    <java.util.LinkedList$Entry: java.util.LinkedList$Entry next> = <java.util.LinkedList$Entry: java.util.LinkedList$Entry next> *
    <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous> = <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous> *
    v_341 = cons(r_9547, r_9545) *
    cons(r_9547, r_9545) = cons(r_9547, r_9545) *
    <java.util.LinkedList: java.util.LinkedList$Entry header> = <java.util.LinkedList: java.util.LinkedList$Entry header> *
    @this: = @this: * cons($n0, empty()) = cons($n0, empty())
    | field(r1,
            <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
            r_9555) *
      field(@this:, <java.util.AbstractList: int modCount>, r_9549) *
      field(@this:, <java.util.LinkedList: int size>,
            (numeric_const(1) + length(r_9545))) *
      field(r1,
            <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
            r_9554) *
      dseg_ne(r_9554, $n0, $n0, r_9554, cons($n0, empty())) *
      field(@this:,
            <java.util.LinkedList: java.util.LinkedList$Entry header>, r1)
    (r_9545 = empty() * r1 = r1 * r_9555 = r_9554 |  )
    || ( | dseg_ne(r1, r_9554, r1, r_9555, r_9545) )


====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================

>r_9538 = r1 = $r3 = $r4  * r_9542 = @this: = r0  
 field(@this:, <java.util.LinkedList: java.util.LinkedList$Entry header>, r1)
 | 
   | field(r1,
           <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
           r_9539) *
     field(@this:, <java.util.AbstractList: int modCount>, r_9532) *
     field(@this:, <java.util.LinkedList: int size>, length(v_341)) *
     field(r1, <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
           r1)
   (v_341 = empty() * r1 = r1 * r_9539 = r1 |  )
   || ( | dseg_ne(r1, r1, r1, r_9539, v_341) ) 
 |- v_341 = cons(r_9547, r_9545) * r2 = r1 * nil() = $n0
    | field(r1,
            <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
            r_9555) *
      field(@this:, <java.util.AbstractList: int modCount>, r_9549) *
      field(@this:, <java.util.LinkedList: int size>,
            (numeric_const(1) + length(r_9545))) *
      field(r1,
            <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
            r_9554) *
      dseg_ne(r_9554, $n0, $n0, r_9554, cons($n0, empty()))
    (r_9545 = empty() * r1 = r1 * r_9555 = r_9554 |  )
    || ( | dseg_ne(r1, r_9554, r1, r_9555, r_9545) )

Rule: field_remove1

Foo

====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================

->r_9538 = r1 = $r3 = $r4  * r_9542 = @this: = r0  
  field(r1,
        <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
        r_9539)*
  field(@this:, <java.util.LinkedList: java.util.LinkedList$Entry header>, r1)
  | 
    | field(r1,
            <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>, r1) *
      field(@this:, <java.util.LinkedList: int size>, length(v_341)) *
      field(@this:, <java.util.AbstractList: int modCount>, r_9532)
    (v_341 = empty() * r1 = r1 * r_9539 = r1 |  )
    || ( | dseg_ne(r1, r1, r1, r_9539, v_341) ) 
  |- v_341 = cons(r_9547, r_9545) * r2 = r1 * nil() = $n0
     | field(@this:, <java.util.AbstractList: int modCount>, r_9549) *
       field(@this:, <java.util.LinkedList: int size>,
             (numeric_const(1) + length(r_9545))) *
       field(r1,
             <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
             r_9554) *
       dseg_ne(r_9554, $n0, $n0, r_9554, cons($n0, empty()))
     (r_9545 = empty() * r1 = r1 * r_9539 = r_9554 |  )
     || ( | dseg_ne(r1, r_9554, r1, r_9539, r_9545) )

Rule: field_remove1

Foo

====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================

-->r_9538 = r1 = $r3 = $r4  * r_9542 = @this: = r0  
   field(@this:, <java.util.AbstractList: int modCount>, r_9532)*
   field(r1,
         <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
         r_9539)*
   field(@this:, <java.util.LinkedList: java.util.LinkedList$Entry header>,
         r1)
   | 
     | field(r1,
             <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
             r1) *
       field(@this:, <java.util.LinkedList: int size>, length(v_341))
     (v_341 = empty() * r1 = r1 * r_9539 = r1 |  )
     || ( | dseg_ne(r1, r1, r1, r_9539, v_341) ) 
   |- v_341 = cons(r_9547, r_9545) * r2 = r1 * nil() = $n0
      | field(@this:, <java.util.LinkedList: int size>,
              (numeric_const(1) + length(r_9545))) *
        field(r1,
              <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
              r_9554) *
        dseg_ne(r_9554, $n0, $n0, r_9554, cons($n0, empty()))
      (r_9545 = empty() * r1 = r1 * r_9539 = r_9554 |  )
      || ( | dseg_ne(r1, r_9554, r1, r_9539, r_9545) )

Rule: field_remove1

Foo

====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================

--->r_9538 = r1 = $r3 = $r4  * r_9542 = @this: = r0  
    field(@this:, <java.util.LinkedList: int size>, length(v_341))*
    field(@this:, <java.util.AbstractList: int modCount>, r_9532)*
    field(r1,
          <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
          r_9539)*
    field(@this:, <java.util.LinkedList: java.util.LinkedList$Entry header>,
          r1)
    | 
      | field(r1,
              <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
              r1)
      (v_341 = empty() * r1 = r1 * r_9539 = r1 |  )
      || ( | dseg_ne(r1, r1, r1, r_9539, v_341) ) 
    |- length(v_341) = (numeric_const(1) + length(r_9545)) *
       v_341 = cons(r_9547, r_9545) * r2 = r1 * nil() = $n0
       | field(r1,
               <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
               r_9554) *
         dseg_ne(r_9554, $n0, $n0, r_9554, cons($n0, empty()))
       (r_9545 = empty() * r1 = r1 * r_9539 = r_9554 |  )
       || ( | dseg_ne(r1, r_9554, r1, r_9539, r_9545) )

Rule: field_remove1

Foo

====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================

---->r_9538 = r1 = $r3 = $r4  * r_9542 = @this: = r0  
     field(r1, <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
           r1)*
     field(@this:, <java.util.LinkedList: int size>, length(v_341))*
     field(@this:, <java.util.AbstractList: int modCount>, r_9532)*
     field(r1,
           <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
           r_9539)*
     field(@this:, <java.util.LinkedList: java.util.LinkedList$Entry header>,
           r1)
     |  | 
       (v_341 = empty() * r1 = r1 * r_9539 = r1 |  )
       || ( | dseg_ne(r1, r1, r1, r_9539, v_341) ) 
     |- length(v_341) = (numeric_const(1) + length(r_9545)) *
        v_341 = cons(r_9547, r_9545) * r2 = r1 * nil() = $n0
        | dseg_ne(r1, $n0, $n0, r1, cons($n0, empty()))
        (r_9545 = empty() * r1 = r1 * r_9539 = r1 |  )
        || ( | dseg_ne(r1, r1, r1, r_9539, r_9545) )



====================Start rewrites=======================================Finished rewrites====================

Query external prover
FooElim eqs : v_341 = empty() * r1 = r1 *
r_9539 = r1


====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================

----->r_9539 = r1 = $r3 = $r4  * r_9540 = v_341 = empty()  *
      r_9542 = @this: = r0  
      field(r1,
            <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>, r1)*
      field(@this:, <java.util.LinkedList: int size>, length(v_341))*
      field(@this:, <java.util.AbstractList: int modCount>, r_9532)*
      field(r1,
            <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
            r1)*
      field(@this:,
            <java.util.LinkedList: java.util.LinkedList$Entry header>, r1)
      |  |   
      |- length(v_341) = (numeric_const(1) + length(r_9545)) *
         v_341 = cons(r_9547, r_9545) * r2 = r1 * nil() = $n0
         | dseg_ne(r1, $n0, $n0, r1, cons($n0, v_341))
         (r_9545 = v_341 * r1 = r1 * r1 = r1 |  )
         || ( | dseg_ne(r1, r1, r1, r1, r_9545) )

Rule: cons_empty_eq_right

Foo

====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================

------>r_9539 = r1 = $r3 = $r4  * r_9540 = v_341 = empty()  *
       r_9542 = @this: = r0  
       field(r1,
             <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
             r1)*
       field(@this:, <java.util.LinkedList: int size>, length(v_341))*
       field(@this:, <java.util.AbstractList: int modCount>, r_9532)*
       field(r1,
             <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
             r1)*
       field(@this:,
             <java.util.LinkedList: java.util.LinkedList$Entry header>, r1)
       |  |    |-  |  False



====================Start rewrites======================Using rule:
length_empty gives r_9594 = numeric_const(0)  
equal to r_9534 = length(v_341) 
.
Rewritten to
 r_9539 = r1 = $r3 = $r4  * r_9540 = v_341 = empty()  *
 r_9542 = @this: = r0  * r_9594 = numeric_const(0) = length(v_341)  
 field(r1, <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>, r1)*
 field(@this:, <java.util.LinkedList: int size>, numeric_const(0))*
 field(@this:, <java.util.AbstractList: int modCount>, r_9532)*
 field(r1, <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
       r1)*
 field(@this:, <java.util.LinkedList: java.util.LinkedList$Entry header>, r1)
 |  |    |-  |  False


====================Start rewrites=======================================Finished rewrites====================

Ask external prover to complete proof.
Not an or!
Find plain contradiction:
Ask external prover to complete proof.
Backtracking!
Backtracking!
Backtracking!
Backtracking!
Backtracking!

---------------------------------------------------------
Goal
r_9602 = r1 = $r3 = $r4  * r_9606 = @this: = r0   
| 
  | field(r1, <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
          r1) *
    field(@this:, <java.util.LinkedList: int size>, length(v_341)) *
    field(@this:, <java.util.AbstractList: int modCount>, r_9596) *
    field(r1,
          <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
          r_9603) *
    field(@this:, <java.util.LinkedList: java.util.LinkedList$Entry header>,
          r1)
  (v_341 = empty() * r1 = r1 * r_9603 = r1 |  )
  || ( | dseg_ne(r1, r1, r1, r_9603, v_341) ) 
|- v_341 = r_9623 * app(r_9624, r_9608) = r_9623 *
   cons(r_9610, r_9614) = r_9622 * @this: = r_9621 * @this: = r_9621 *
   <java.util.LinkedList: java.util.LinkedList$Entry header> = r_9620 *
   <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous> = r_9617 *
   <java.util.LinkedList$Entry: java.util.LinkedList$Entry next> = r_9616 *
   <java.util.LinkedList: int size> = r_9615 * empty() = r_9614 *
   <java.util.AbstractList: int modCount> = r_9612 * $n0 = r_9610 *
   nil() = r_9610 * r1 = r_9609 * r1 = r_9609 * r1 = r_9609 * r2 = r_9609 *
   length(r_9623) = r_9607
   | dseg_ne(r_9618, r_9610, r_9610, r_9618, r_9622) *
     field(r_9609, r_9616, r_9618) * field(r_9621, r_9615, r_9607) *
     field(r_9621, r_9612, r_9613) * field(r_9609, r_9617, r_9619) *
     dseg_ne(r_9611, r_9610, r_9610, r_9611, r_9622) *
     field(r_9621, r_9620, r_9609)
   (r_9608 = r_9614 * r_9609 = r_9609 * r_9619 = r_9611 |  )
   || ( | dseg_ne(r_9609, r_9611, r_9609, r_9619, r_9608) )

Start time :4.436277 
Foo

====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================

>r_9602 = r1 = $r3 = $r4  * r_9606 = @this: = r0  
 field(@this:, <java.util.LinkedList: java.util.LinkedList$Entry header>, r1)*
 field(@this:, <java.util.LinkedList: int size>, length(v_341))
 | 
   | field(r1,
           <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
           r_9603) *
     field(@this:, <java.util.AbstractList: int modCount>, r_9596) *
     field(r1, <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
           r1)
   (v_341 = empty() * r1 = r1 * r_9603 = r1 |  )
   || ( | dseg_ne(r1, r1, r1, r_9603, v_341) ) 
 |- app(r_9624, r_9608) = v_341 * nil() = $n0 * r2 = r1
    | dseg_ne(r_9618, $n0, $n0, r_9618, cons($n0, empty())) *
      field(r1,
            <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
            r_9618) *
      field(@this:, <java.util.AbstractList: int modCount>, r_9613) *
      field(r1,
            <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
            r_9619) *
      dseg_ne(r_9611, $n0, $n0, r_9611, cons($n0, empty()))
    (r_9608 = empty() * r1 = r1 * r_9619 = r_9611 |  )
    || ( | dseg_ne(r1, r_9611, r1, r_9619, r_9608) )

Rule: field_remove1

Foo

====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================

->r_9602 = r1 = $r3 = $r4  * r_9606 = @this: = r0  
  field(r1, <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>, r1)*
  field(@this:, <java.util.LinkedList: java.util.LinkedList$Entry header>, r1)*
  field(@this:, <java.util.LinkedList: int size>, length(v_341))
  | 
    | field(r1,
            <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
            r_9603) *
      field(@this:, <java.util.AbstractList: int modCount>, r_9596)
    (v_341 = empty() * r1 = r1 * r_9603 = r1 |  )
    || ( | dseg_ne(r1, r1, r1, r_9603, v_341) ) 
  |- app(r_9624, r_9608) = v_341 * nil() = $n0 * r2 = r1
     | dseg_ne(r1, $n0, $n0, r1, cons($n0, empty())) *
       field(@this:, <java.util.AbstractList: int modCount>, r_9613) *
       field(r1,
             <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
             r_9619) *
       dseg_ne(r_9611, $n0, $n0, r_9611, cons($n0, empty()))
     (r_9608 = empty() * r1 = r1 * r_9619 = r_9611 |  )
     || ( | dseg_ne(r1, r_9611, r1, r_9619, r_9608) )

Rule: field_remove1

Foo

====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================

-->r_9602 = r1 = $r3 = $r4  * r_9606 = @this: = r0  
   field(@this:, <java.util.AbstractList: int modCount>, r_9596)*
   field(r1, <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
         r1)*
   field(@this:, <java.util.LinkedList: java.util.LinkedList$Entry header>,
         r1)*
   field(@this:, <java.util.LinkedList: int size>, length(v_341))
   | 
     | field(r1,
             <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
             r_9603)
     (v_341 = empty() * r1 = r1 * r_9603 = r1 |  )
     || ( | dseg_ne(r1, r1, r1, r_9603, v_341) ) 
   |- app(r_9624, r_9608) = v_341 * nil() = $n0 * r2 = r1
      | dseg_ne(r1, $n0, $n0, r1, cons($n0, empty())) *
        field(r1,
              <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
              r_9619) *
        dseg_ne(r_9611, $n0, $n0, r_9611, cons($n0, empty()))
      (r_9608 = empty() * r1 = r1 * r_9619 = r_9611 |  )
      || ( | dseg_ne(r1, r_9611, r1, r_9619, r_9608) )

Rule: field_remove1

Foo

====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================

--->r_9602 = r1 = $r3 = $r4  * r_9606 = @this: = r0  
    field(r1,
          <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
          r_9603)*
    field(@this:, <java.util.AbstractList: int modCount>, r_9596)*
    field(r1, <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
          r1)*
    field(@this:, <java.util.LinkedList: java.util.LinkedList$Entry header>,
          r1)*
    field(@this:, <java.util.LinkedList: int size>, length(v_341))
    |  | 
      (v_341 = empty() * r1 = r1 * r_9603 = r1 |  )
      || ( | dseg_ne(r1, r1, r1, r_9603, v_341) ) 
    |- app(r_9624, r_9608) = v_341 * nil() = $n0 * r2 = r1
       | dseg_ne(r1, $n0, $n0, r1, cons($n0, empty())) *
         dseg_ne(r_9611, $n0, $n0, r_9611, cons($n0, empty()))
       (r_9608 = empty() * r1 = r1 * r_9603 = r_9611 |  )
       || ( | dseg_ne(r1, r_9611, r1, r_9603, r_9608) )



====================Start rewrites=======================================Finished rewrites====================

Query external prover
FooElim eqs : v_341 = empty() * r1 = r1 *
r_9603 = r1


====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================

---->r_9603 = r1 = $r3 = $r4  * r_9604 = v_341 = empty()  *
     r_9606 = @this: = r0  
     field(r1,
           <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
           r1)*
     field(@this:, <java.util.AbstractList: int modCount>, r_9596)*
     field(r1, <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
           r1)*
     field(@this:, <java.util.LinkedList: java.util.LinkedList$Entry header>,
           r1)*
     field(@this:, <java.util.LinkedList: int size>, length(v_341)) | 
      |   
     |- app(r_9624, r_9608) = v_341 * nil() = $n0 * r2 = r1
        | dseg_ne(r1, $n0, $n0, r1, cons($n0, v_341)) *
          dseg_ne(r_9611, $n0, $n0, r_9611, cons($n0, v_341))
        (r_9608 = v_341 * r1 = r1 * r1 = r_9611 |  )
        || ( | dseg_ne(r1, r_9611, r1, r1, r_9608) )

Rule: app_is_emp1_right

Foo

====================Start rewrites======================Using rule:
app_empty_first gives r_9608 = v_341 = empty()  
equal to r_9630 = app(v_341, v_341) 
.
Rewritten to
 r_9603 = r1 = $r3 = $r4  * r_9606 = @this: = r0  *
 r_9608 = v_341 = empty() = app(v_341, v_341)  
 field(r1, <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
       r1)*
 field(@this:, <java.util.AbstractList: int modCount>, r_9596)*
 field(r1, <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>, r1)*
 field(@this:, <java.util.LinkedList: java.util.LinkedList$Entry header>, r1)*
 field(@this:, <java.util.LinkedList: int size>, length(v_341)) |  |   
 |- r2 = r1 * nil() = $n0 * v_341 = v_341 * v_341 = v_341
    | dseg_ne(r1, $n0, $n0, r1, cons($n0, v_341)) *
      dseg_ne(r_9611, $n0, $n0, r_9611, cons($n0, v_341))
    (v_341 = v_341 * r1 = r1 * r1 = r_9611 |  )
    || ( | dseg_ne(r1, r_9611, r1, r1, v_341) )


====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================

----->r_9603 = r1 = $r3 = $r4  * r_9606 = @this: = r0  *
      r_9608 = v_341 = empty()  
      field(r1,
            <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
            r1)*
      field(@this:, <java.util.AbstractList: int modCount>, r_9596)*
      field(r1,
            <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>, r1)*
      field(@this:,
            <java.util.LinkedList: java.util.LinkedList$Entry header>, r1)*
      field(@this:, <java.util.LinkedList: int size>, length(v_341)) | 
       |   
      |- nil() = $n0 * r2 = r1
         | dseg_ne(r1, $n0, $n0, r1, cons($n0, v_341)) *
           dseg_ne(r_9611, $n0, $n0, r_9611, cons($n0, v_341))
         (v_341 = v_341 * r1 = r1 * r1 = r_9611 |  )
         || ( | dseg_ne(r1, r_9611, r1, r1, v_341) )



====================Start rewrites======================Using rule:
length_empty gives r_9652 = numeric_const(0)  
equal to r_9598 = length(v_341) 
.
Rewritten to
 r_9603 = r1 = $r3 = $r4  * r_9606 = @this: = r0  *
 r_9608 = v_341 = empty()  * r_9652 = numeric_const(0) = length(v_341)  
 field(r1, <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
       r1)*
 field(@this:, <java.util.AbstractList: int modCount>, r_9596)*
 field(r1, <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>, r1)*
 field(@this:, <java.util.LinkedList: java.util.LinkedList$Entry header>, r1)*
 field(@this:, <java.util.LinkedList: int size>, numeric_const(0)) | 
  |   
 |- nil() = $n0 * r2 = r1
    | dseg_ne(r1, $n0, $n0, r1, cons($n0, v_341)) *
      dseg_ne(r_9611, $n0, $n0, r_9611, cons($n0, v_341))
    (v_341 = v_341 * r1 = r1 * r1 = r_9611 |  )
    || ( | dseg_ne(r1, r_9611, r1, r1, v_341) )


====================Start rewrites=======================================Finished rewrites====================

Query external prover
Case split on or right!
Foo

====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================

------>r_9603 = r1 = $r3 = $r4  * r_9606 = @this: = r0  *
       r_9608 = v_341 = empty()  * r_9652 = numeric_const(0) = length(v_341) 
        field(r1,
              <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
              r1)*
        field(@this:, <java.util.AbstractList: int modCount>, r_9596)*
        field(r1,
              <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
              r1)*
        field(@this:,
              <java.util.LinkedList: java.util.LinkedList$Entry header>, r1)*
        field(@this:, <java.util.LinkedList: int size>, numeric_const(0))
       |  |   
       |- nil() = $n0 * r2 = r1
          | dseg_ne(r1, $n0, $n0, r1, cons($n0, v_341)) *
            dseg_ne(r1, $n0, $n0, r1, cons($n0, v_341))
          

Rule: dseg_dseg_contradiction1_right

Foo

====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================

------->r_9603 = r1 = $r3 = $r4  * r_9606 = @this: = r0  *
        r_9608 = v_341 = empty()  *
        r_9652 = numeric_const(0) = length(v_341)  
        field(r1,
              <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
              r1)*
        field(@this:, <java.util.AbstractList: int modCount>, r_9596)*
        field(r1,
              <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
              r1)*
        field(@this:,
              <java.util.LinkedList: java.util.LinkedList$Entry header>, r1)*
        field(@this:, <java.util.LinkedList: int size>, numeric_const(0))
        |  |    |-  |  False



====================Start rewrites=======================================Finished rewrites====================

Ask external prover to complete proof.
Not an or!
Find plain contradiction:
Ask external prover to complete proof.
Backtracking!
Backtracking!
Foo

====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================

------>r_9653 = numeric_const(0) = length(v_341)  *
       r_9660 = v_341 = empty()  * r_9661 = @this: = r0  *
       r_9663 = r1 = $r3 = $r4  
       field(r1,
             <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
             r1)*
       field(@this:, <java.util.AbstractList: int modCount>, r_9667)*
       field(r1,
             <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
             r1)*
       field(@this:,
             <java.util.LinkedList: java.util.LinkedList$Entry header>, r1)*
       field(@this:, <java.util.LinkedList: int size>, numeric_const(0))
       |  |   
       |- nil() = $n0 * r2 = r1
          | dseg_ne(r1, r_9659, r1, r1, v_341) *
            dseg_ne(r1, $n0, $n0, r1, cons($n0, v_341)) *
            dseg_ne(r_9659, $n0, $n0, r_9659, cons($n0, v_341))
          

Rule: dseg_ne_empty5_right

Foo

====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================

------->r_9653 = numeric_const(0) = length(v_341)  *
        r_9660 = v_341 = empty()  * r_9661 = @this: = r0  *
        r_9663 = r1 = $r3 = $r4  
        field(r1,
              <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
              r1)*
        field(@this:, <java.util.AbstractList: int modCount>, r_9667)*
        field(r1,
              <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
              r1)*
        field(@this:,
              <java.util.LinkedList: java.util.LinkedList$Entry header>, r1)*
        field(@this:, <java.util.LinkedList: int size>, numeric_const(0))
        |  |    |-  |  False



====================Start rewrites=======================================Finished rewrites====================

Ask external prover to complete proof.
Not an or!
Find plain contradiction:
Ask external prover to complete proof.
Backtracking!
Backtracking!
Backtracking!
Backtracking!
Backtracking!
Backtracking!
