Goal
r_119 = @this: = r0  * r_5854 = length(v_334) = $i0 = $ret_var   
| 
  | field(@this:, <java.util.LinkedList: int size>, $i0) *
    field(@this:, <java.util.LinkedList: java.util.LinkedList$Entry header>,
          r_5846) *
    field(r_5846,
          <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
          r_5847) *
    field(r_5846,
          <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
          r_5845) *
    field(@this:, <java.util.AbstractList: int modCount>, r_5858)
  (v_334 = empty() * r_5847 = r_5846 * r_5845 = r_5846 |  )
  || ( | dseg_ne(r_5847, r_5846, r_5846, r_5845, v_334) ) 
|- $i0 = r_5921 * v_334 = r_5920 * length(r_5920) = r_5919 *
   {list=r_5920} = r_5918 * @this: = r_5917 * r_5921 = r_5919
   | LinkedList$java.util.LinkedList(r_5917, r_5918) 

Start time :2.660165 
Foo

====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================

>r_119 = @this: = r0  * r_5854 = length(v_334) = $i0 = $ret_var   
 | 
   | field(@this:, <java.util.AbstractList: int modCount>, r_5858) *
     field(r_5846,
           <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
           r_5845) *
     field(r_5846,
           <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
           r_5847) *
     field(@this:, <java.util.LinkedList: java.util.LinkedList$Entry header>,
           r_5846) *
     field(@this:, <java.util.LinkedList: int size>, $i0)
   (v_334 = empty() * r_5847 = r_5846 * r_5845 = r_5846 |  )
   || ( | dseg_ne(r_5847, r_5846, r_5846, r_5845, v_334) ) 
 |-  | LinkedList$java.util.LinkedList(@this:, {list=v_334}) 

Rule: apf_body_right_LinkedList

Foo

====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================

->r_119 = @this: = r0  * r_5932 = length(v_334) = $i0 = $ret_var  
  field(@this:, <java.util.LinkedList: int size>, $i0)
  | 
    | field(@this:,
            <java.util.LinkedList: java.util.LinkedList$Entry header>, r_5846) *
      field(r_5846,
            <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
            r_5847) *
      field(r_5846,
            <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
            r_5845) *
      field(@this:, <java.util.AbstractList: int modCount>, r_5858)
    (v_334 = empty() * r_5847 = r_5846 * r_5845 = r_5846 |  )
    || ( | dseg_ne(r_5847, r_5846, r_5846, r_5845, v_334) ) 
  |- 
     | AbstractSequentialList$java.util.AbstractSequentialList(@this:,
                                                               {modCount=r_5930}) *
       field(@this:,
             <java.util.LinkedList: java.util.LinkedList$Entry header>,
             r_5927) *
       field(r_5927,
             <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
             r_5928) *
       field(r_5927,
             <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
             r_5926) *
       dseg(r_5928, r_5927, r_5927, r_5926, v_334)
     

Rule: field_remove1

Foo

====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================

-->r_119 = @this: = r0  * r_5932 = length(v_334) = $i0 = $ret_var  
   field(@this:, <java.util.LinkedList: java.util.LinkedList$Entry header>,
         r_5846)*
   field(@this:, <java.util.LinkedList: int size>, $i0)
   | 
     | field(@this:, <java.util.AbstractList: int modCount>, r_5858) *
       field(r_5846,
             <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
             r_5845) *
       field(r_5846,
             <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
             r_5847)
     (v_334 = empty() * r_5847 = r_5846 * r_5845 = r_5846 |  )
     || ( | dseg_ne(r_5847, r_5846, r_5846, r_5845, v_334) ) 
   |- 
      | AbstractSequentialList$java.util.AbstractSequentialList(@this:,
                                                                {modCount=r_5930}) *
        field(r_5846,
              <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
              r_5928) *
        field(r_5846,
              <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
              r_5926) *
        dseg(r_5928, r_5846, r_5846, r_5926, v_334)
      

Rule: field_remove1

Foo

====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================

--->r_119 = @this: = r0  * r_5932 = length(v_334) = $i0 = $ret_var  
    field(r_5846,
          <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
          r_5847)*
    field(@this:, <java.util.LinkedList: java.util.LinkedList$Entry header>,
          r_5846)*
    field(@this:, <java.util.LinkedList: int size>, $i0)
    | 
      | field(@this:, <java.util.AbstractList: int modCount>, r_5858) *
        field(r_5846,
              <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
              r_5845)
      (v_334 = empty() * r_5847 = r_5846 * r_5845 = r_5846 |  )
      || ( | dseg_ne(r_5847, r_5846, r_5846, r_5845, v_334) ) 
    |- 
       | AbstractSequentialList$java.util.AbstractSequentialList(@this:,
                                                                 {modCount=r_5930}) *
         field(r_5846,
               <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
               r_5926) *
         dseg(r_5847, r_5846, r_5846, r_5926, v_334)
       

Rule: field_remove1

Foo

====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================

---->r_119 = @this: = r0  * r_5932 = length(v_334) = $i0 = $ret_var  
     field(r_5846,
           <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
           r_5845)*
     field(r_5846,
           <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
           r_5847)*
     field(@this:, <java.util.LinkedList: java.util.LinkedList$Entry header>,
           r_5846)*
     field(@this:, <java.util.LinkedList: int size>, $i0)
     |  | field(@this:, <java.util.AbstractList: int modCount>, r_5858)
       (v_334 = empty() * r_5847 = r_5846 * r_5845 = r_5846 |  )
       || ( | dseg_ne(r_5847, r_5846, r_5846, r_5845, v_334) ) 
     |- 
        | AbstractSequentialList$java.util.AbstractSequentialList(@this:,
                                                                  {modCount=r_5930}) *
          dseg(r_5847, r_5846, r_5846, r_5845, v_334)
        

Rule: dseg_disj_right

Foo

====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================

----->r_119 = @this: = r0  * r_5932 = length(v_334) = $i0 = $ret_var  
      field(r_5846,
            <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
            r_5845)*
      field(r_5846,
            <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
            r_5847)*
      field(@this:,
            <java.util.LinkedList: java.util.LinkedList$Entry header>, r_5846)*
      field(@this:, <java.util.LinkedList: int size>, $i0)
      |  | field(@this:, <java.util.AbstractList: int modCount>, r_5858)
        (v_334 = empty() * r_5847 = r_5846 * r_5845 = r_5846 |  )
        || ( | dseg_ne(r_5847, r_5846, r_5846, r_5845, v_334) ) 
      |- 
         | AbstractSequentialList$java.util.AbstractSequentialList(@this:,
                                                                   {modCount=r_5930})
         (v_334 = empty() * r_5847 = r_5846 * r_5845 = r_5846 |  )
         || ( | dseg_ne(r_5847, r_5846, r_5846, r_5845, v_334) )

Rule: apf_body_right_AbstractSequentialList

Foo

====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================

------>r_119 = @this: = r0  * r_5932 = length(v_334) = $i0 = $ret_var  
       field(r_5846,
             <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
             r_5845)*
       field(r_5846,
             <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
             r_5847)*
       field(@this:,
             <java.util.LinkedList: java.util.LinkedList$Entry header>,
             r_5846)*
       field(@this:, <java.util.LinkedList: int size>, $i0)
       |  | field(@this:, <java.util.AbstractList: int modCount>, r_5858)
         (v_334 = empty() * r_5847 = r_5846 * r_5845 = r_5846 |  )
         || ( | dseg_ne(r_5847, r_5846, r_5846, r_5845, v_334) ) 
       |-  | AbstractList$java.util.AbstractList(@this:, {modCount=r_5933})
          (v_334 = empty() * r_5847 = r_5846 * r_5845 = r_5846 |  )
          || ( | dseg_ne(r_5847, r_5846, r_5846, r_5845, v_334) )

Rule: apf_body_right_AbstractList

Foo

====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================

------->r_119 = @this: = r0  * r_5932 = length(v_334) = $i0 = $ret_var  
        field(r_5846,
              <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
              r_5845)*
        field(r_5846,
              <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
              r_5847)*
        field(@this:,
              <java.util.LinkedList: java.util.LinkedList$Entry header>,
              r_5846)*
        field(@this:, <java.util.LinkedList: int size>, $i0)
        |  | field(@this:, <java.util.AbstractList: int modCount>, r_5858)
          (v_334 = empty() * r_5847 = r_5846 * r_5845 = r_5846 |  )
          || ( | dseg_ne(r_5847, r_5846, r_5846, r_5845, v_334) ) 
        |-  | field(@this:, <java.util.AbstractList: int modCount>, r_5935)
           (v_334 = empty() * r_5847 = r_5846 * r_5845 = r_5846 |  )
           || ( | dseg_ne(r_5847, r_5846, r_5846, r_5845, v_334) )

Rule: field_remove1

Foo

====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================

-------->r_119 = @this: = r0  * r_5932 = length(v_334) = $i0 = $ret_var  
         field(@this:, <java.util.AbstractList: int modCount>, r_5858)*
         field(r_5846,
               <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
               r_5845)*
         field(r_5846,
               <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
               r_5847)*
         field(@this:,
               <java.util.LinkedList: java.util.LinkedList$Entry header>,
               r_5846)*
         field(@this:, <java.util.LinkedList: int size>, $i0)
         |  | 
           (v_334 = empty() * r_5847 = r_5846 * r_5845 = r_5846 |  )
           || ( | dseg_ne(r_5847, r_5846, r_5846, r_5845, v_334) ) 
         |-  | 
            (v_334 = empty() * r_5847 = r_5846 * r_5845 = r_5846 |  )
            || ( | dseg_ne(r_5847, r_5846, r_5846, r_5845, v_334) )



====================Start rewrites=======================================Finished rewrites====================

Query external prover
FooElim eqs : v_334 = empty() * r_5847 = r_5846 *
r_5845 = r_5846


====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================

--------->r_119 = @this: = r0  * r_5924 = v_334 = empty()  *
          r_5932 = length(v_334) = $i0 = $ret_var  
          field(@this:, <java.util.AbstractList: int modCount>, r_5858)*
          field(r_5845,
                <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
                r_5845)*
          field(r_5845,
                <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
                r_5845)*
          field(@this:,
                <java.util.LinkedList: java.util.LinkedList$Entry header>,
                r_5845)*
          field(@this:, <java.util.LinkedList: int size>, $i0) |  |   
          |-  | 
             (v_334 = v_334 * r_5845 = r_5845 * r_5845 = r_5845 |  )
             || ( | dseg_ne(r_5845, r_5845, r_5845, r_5845, v_334) )



====================Start rewrites======================Using rule:
length_empty gives r_5951 = numeric_const(0)  
equal to r_5932 = length(v_334) = $i0 = $ret_var 
.
Rewritten to
 r_119 = @this: = r0  * r_5924 = v_334 = empty()  *
 r_5951 = numeric_const(0) = length(v_334) = $i0 = $ret_var  
 field(@this:, <java.util.AbstractList: int modCount>, r_5858)*
 field(r_5845,
       <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
       r_5845)*
 field(r_5845, <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
       r_5845)*
 field(@this:, <java.util.LinkedList: java.util.LinkedList$Entry header>,
       r_5845)*
 field(@this:, <java.util.LinkedList: int size>, $i0) |  |   
 |-  | 
    (v_334 = v_334 * r_5845 = r_5845 * r_5845 = r_5845 |  )
    || ( | dseg_ne(r_5845, r_5845, r_5845, r_5845, v_334) )


====================Start rewrites=======================================Finished rewrites====================

Query external prover
Case split on or right!
Foo

====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================

---------->r_119 = @this: = r0  * r_5924 = v_334 = empty()  *
           r_5951 = numeric_const(0) = length(v_334) = $i0 = $ret_var  
           field(@this:, <java.util.AbstractList: int modCount>, r_5858)*
           field(r_5845,
                 <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
                 r_5845)*
           field(r_5845,
                 <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
                 r_5845)*
           field(@this:,
                 <java.util.LinkedList: java.util.LinkedList$Entry header>,
                 r_5845)*
           field(@this:, <java.util.LinkedList: int size>, $i0) |  |   
           |-  |  



====================Start rewrites=======================================Finished rewrites====================

--------->r_5937 = length(v_334) = $i0 = $ret_var  * r_5949 = @this: = r0  
          field(@this:, <java.util.AbstractList: int modCount>, r_5940)*
          field(r_5946,
                <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
                r_5947)*
          field(r_5946,
                <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
                r_5945)*
          field(@this:,
                <java.util.LinkedList: java.util.LinkedList$Entry header>,
                r_5946)*
          field(@this:, <java.util.LinkedList: int size>, $i0)
          |  | dseg_ne(r_5945, r_5946, r_5946, r_5947, v_334)  
          |-  | 
             (v_334 = empty() * r_5945 = r_5946 * r_5947 = r_5946 |  )
             || ( | dseg_ne(r_5945, r_5946, r_5946, r_5947, v_334) )



====================Start rewrites=======================================Finished rewrites====================

Query external prover
Case split on or right!
Foo

====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================

---------->r_5937 = length(v_334) = $i0 = $ret_var  * r_5949 = @this: = r0  
           field(@this:, <java.util.AbstractList: int modCount>, r_5940)*
           field(r_5946,
                 <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
                 r_5947)*
           field(r_5946,
                 <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
                 r_5945)*
           field(@this:,
                 <java.util.LinkedList: java.util.LinkedList$Entry header>,
                 r_5946)*
           field(@this:, <java.util.LinkedList: int size>, $i0)
           |  | dseg_ne(r_5945, r_5946, r_5946, r_5947, v_334)  
           |- v_334 = empty() * r_5945 = r_5946 * r_5947 = r_5946 |  

Rule: dseg_ne_empty1_split

Foo

====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================

----------->r_5937 = length(v_334) = $i0 = $ret_var  * r_5949 = @this: = r0  
            field(@this:, <java.util.AbstractList: int modCount>, r_5940)*
            field(r_5946,
                  <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
                  r_5947)*
            field(r_5946,
                  <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
                  r_5945)*
            field(@this:,
                  <java.util.LinkedList: java.util.LinkedList$Entry header>,
                  r_5946)*
            field(@this:, <java.util.LinkedList: int size>, $i0)
            |  | dseg_ne(r_5945, r_5946, r_5946, r_5947, v_334)  
            |-  |  False



====================Start rewrites=======================================Finished rewrites====================

Ask external prover to complete proof.
Not an or!
Find plain contradiction:
Ask external prover to complete proof.
Backtracking!
Backtracking!
Foo

====================Start rewrites=======================================Finished rewrites====================



====================Start rewrites=======================================Finished rewrites====================

---------->r_5963 = @this: = r0  * r_5974 = length(v_334) = $i0 = $ret_var  
           dseg_ne(r_5967, r_5966, r_5966, r_5965, v_334)*
           field(@this:, <java.util.AbstractList: int modCount>, r_5971)*
           field(r_5966,
                 <java.util.LinkedList$Entry: java.util.LinkedList$Entry previous>,
                 r_5965)*
           field(r_5966,
                 <java.util.LinkedList$Entry: java.util.LinkedList$Entry next>,
                 r_5967)*
           field(@this:,
                 <java.util.LinkedList: java.util.LinkedList$Entry header>,
                 r_5966)*
           field(@this:, <java.util.LinkedList: int size>, $i0) |  |   
           |-  |  



====================Start rewrites=======================================Finished rewrites====================

End time :2.680167 
