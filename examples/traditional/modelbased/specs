class SEQUENCE
{
	SEQUENCE cons(int) :
		{ SEQ(@this:,{s=_a}) }
		{ SEQ(@this:,{s=_a}) * SEQ($ret_v1,{s=cons(@parameter0:,_a)}) };
	int head() :
		{ SEQ(@this:,{s=cons(_e,_a)}) }
		{ SEQ(@this:,{s=cons(_e,_a)}) * $ret_v1=_e };
	SEQUENCE tail() :
		{ SEQ(@this:,{s=cons(_e,_a)}) }
		{ SEQ(@this:,{s=cons(_e,_a)}) * SEQ($ret_v1,{s=_a}) };
	int is_nil() :
		{ SEQ(@this:,{s=_a}) }
		{ SEQ(@this:,{s=_a}) * $ret_v1=builtin_eq(_a,empty()) };
	int eq(SEQUENCE) :
		{ SEQ(@this:,{s=_a}) * SEQ(@parameter0:,{s=_b}) }
		{ SEQ(@this:,{s=_a}) * SEQ(@parameter0:,{s=_b}) * $ret_v1=builtin_eq(_a,_b) };
}

class OLIST
{
	abstract SEQUENCE model() :
		{ OL(@this:,{l=_a}) }
		{ OL(@this:,{l=_a}) * SEQ($ret_v1,{s=_a}) };
	abstract void remove_first() :
		{ OL(@this:,{l=cons(_e,_a)}) }
		{ OL(@this:,{l=_a}) };
	abstract int is_empty() :
		{ OL(@this:,{l=_a}) }
		{ OL(@this:,{l=_a}) * $ret_v1=builtin_eq(_a,empty()) };
	abstract void empty_inv() :
		{ OL(@this:,{l=_a}) }
		{ OL(@this:,{l=_a}) };
}

