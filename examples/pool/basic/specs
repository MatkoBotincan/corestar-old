class java.lang.Object
{
  void <init>() static: { } { };
}

class java.util.LinkedList
{
  void <init>() static: { } { ls(@this:,nil(), empty()) };

  boolean add(java.lang.Object) : 
    { ls(@this:,nil(),_s) }
    { _s = app(_s0,_s1) * ls(@this:,nil(),app(_s0,cons(@parameter0:,_s1)))};

  java.lang.Object removeFirst() :
    { length(_l) != numeric_const(0) * ls(@this:,nil(),_l) }
    { _x=$ret_v1 * _l = cons(_x,_l2) * ls(@this:,nil(),_l2) };

  int size() :
    { ls(@this:,nil(),_l) }
    { length(_l)=$ret_v1 * ls(@this:,nil(),_l) };
}

class java.sql.DriverManager 
{
  java.sql.Connection getConnection(java.lang.String, java.lang.String, java.lang.String) static:
    { }
    { DBConnection($ret_v1, {connection=sql(@parameter0:,@parameter1:,@parameter2:)})}; 
}

class java.sql.Connection
{
  void close() static: 
    { } { };
}



class DBPool {
  define DBPool(x,type=t) = 
       t = sql(_url,_user,_password) * 
       field(x,<DBPool: java.util.LinkedList conns>,_y) *
       field(x, <DBPool: java.lang.String url>, _url) *
       field(x, <DBPool: java.lang.String user>, _user) *
       field(x, <DBPool: java.lang.String password>, _password) *
       ls(_y,nil(),_R) * DBSet(setof(_R),t) ;

  void <init>(java.lang.String, java.lang.String, java.lang.String) :
   { }
   { DBPool$(@this:, {type=sql(@parameter0:,@parameter1:,@parameter2:)}) };

  void freeResource(java.sql.Connection) : 
       { DBPool$(@this:, {type=_t}) * DBConnection(@parameter0:, {connection=_t})} 
       { DBPool$(@this:, {type=_t}) };

  java.sql.Connection getResource() : 
       { DBPool$(@this:, {type=_t}) } 
       { DBPool$(@this:, {type=_t}) * DBConnection($ret_v1, {connection=_t})  };

}




