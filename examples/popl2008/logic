import "../../src/prover/tests/field_logic";
import "../../src/prover/tests/boolean_logic";



/********************************************
 *   This rule guesses exists
 ********************************************/
rule val_cell_match : 
  | | Val$Cell(?x,?y) |- | Val$Cell(?x,?z) 
without
  ?y != ?z
if
  Val$Cell(?x,?y) | | |- ?y=?z | 
or
  | | Val$Cell(?x,?y) |-  ?y!=?z | Val$Cell(?x,?z) 


/********************************************
 *   This rule guesses unfolds sub_eq
 ********************************************/

rule sub_eq_hack : 
| | |- | subeq({content=?x; old=?z},{content=?y})
if
| | |- ?x=?y| 

rule sub_eq_hack : 
| | |- | subeq({content=?x},{content=?y})
if
| | |- ?x=?y| 

rule sub_eq_hack2 : 
| | |- | subeq({content=?x},{content=?y; old=_z})
if
| | |- ?x=?y| 


/********************************************
 *   TODO: This should be dealt with by the framework
 ********************************************/
rule content__hack :
| | |- { content=?t} = { content=?t2 } |
if
| | |- ?t=?t2 |


/********************************************
 *   TODO: Needs adding to basic arithmetic file
 ********************************************/
rule bp :
  | | |- builtin_plus(?x,?x) = builtin_plus(?y,?y) | 
if
  | | |- ?x=?y | 


/********************************************
 *   TODO: This should be dealt with by the framework
 ********************************************/
rule hack_neq :
  | | |- _x != nil() | 
if
  | _x != nil() | |- |  