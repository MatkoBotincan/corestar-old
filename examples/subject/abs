rule NodeLL_not_nil:
NodeLL(?x,?y) | ?x!=nil() | |- |
if
| | |- |

rule field_not_nil:
field(?x,?f,?y) | ?x!=nil() | |- |
if
| | |- |

rule field_not_nil:
ls(?x,?f,?y) | ?x!=nil() | |- |
if
| | |- |


rule NodeLL_not_eq:
NodeLL(?x,?y) * NodeLL(?z,?w) | ?x!=?z | |- |
if
| | |- |

rule field_not_eq:
field(?x,?f,?y) * field(?z,?f,?w) | ?x!=?z | |- |
if
| | |- |


/************* Abs3 Rule ***********************/
rule ls_obs: 
     | | ls(?x,?z,cons(?w,?r)) * Observer(?w,{vals=?v; subject=?s}) |- |
if
     | | lspe(_f,?z,?r) * lsObs(?x,_f,cons(?w,empty()),?v,?s)
     |- |

rule ls_obs_app1:
| | lsObs(?x,_f,?l,?v,?s) * lsObs(_f,nil(),?l2,?v,?s) |- |
if
| | lsObs(?x,nil(),app(?l,?l2),?v,?s) |- |

rule ls_obs_app2:
| | lsObs(?x,_f,?l,?v,?s) * lsObs(_f,?y,?l2,?v,?s) * ls(?y,?o,?p) |- |
if
| | lsObs(?x,?y,app(?l,?l2),?v,?s) * ls(?y,?o,?p) |- |

rule ls_obs_app2:
| | lsObs(?x,_f,?l,?v,?s) * lsObs(_f,?y,?l2,?v,?s) * lsObs(?y,?o,?p,?q,?r) |- |
if
| | lsObs(?x,?y,app(?l,?l2),?v,?s) * lsObs(?y,?o,?p,?q,?r)  |- |

rule ls_obs_app3:
| | lsObs(?x,_f,?l,?v,?s) * lsObs(_f,nil(),?l2,?v,?s) |- |
if
| | lsObs(?x,nil(),app(?l,?l2),?v,?s) |- |


/*************** Abs1 Rule *******************/
rule ls_ls:
| | ls(?x,_x,?s1) * ls(_x,nil(),?s2) |- |   /* this is for empty | true */
where 
  _x notincontext;
  _x notin ?x
if 
| | ls(?x,nil(),app(?s1,?s2)) |- |   /* result */



/*************** End Abs1 Rule *******************/


/*************** Abs2 Rule *******************/
rule ls_ls_ls:
| | ls(?x,_x,?s1) * ls(_x,?y,?s2) * ls(?y,?z,?s3) |- |   /* this is for empty | true */
where 
  _x notincontext;
  _x notin ?x;
  _x notin ?y;
  _x notin ?z
if 
| | ls(?x,?y,app(?s1,?s2)) * ls(?y,?z,?s3) |- |   /* result */








/*****************Rewrite rules for app and empty and cons **********/
rewrite hd_cons :
  hd(cons(?x,?y)) = ?x

rewrite tl_cons : 
  tl(cons(?x,?y)) = ?y

rewrite app_empty_1 :
  app(empty(),?x) = ?x

rewrite app_empty_2 :
  app(?x,empty()) = ?x

rewrite add_cons_empty: 
  app(cons(?x,empty()), ?y) = cons(?x,?y)

rewrite app_cons :
  app(cons(?x,?y),?z) = cons(?x,app(?y,?z))
without		 
 | (?y=empty()|)
    || (z=empty()|)


rewrite app_app_assoc :
  app(app(?x,?y),?z) = app(?x,app(?y,?z))
without
  | (| (?y=empty()|)
    || (?z=empty()|))
    || (?x=empty()|)

rule ls_pe1:
| | lspe(?x,?y,empty()) |- |
if
| ?x=?y | |- |

rule ls_pe1:
| | lspe(?x,?y,cons(?s,?t)) |- |
if
| | ls(?x,?y,cons(?s,?t)) |- |


/*
rule hacky2 :
  | v = cons(_x,?f) | lsObs(?a,?b,cons(_x,?g),?c,?d) |- |
where 
  _x notincontext
if
  | v = app(_t,?f) | lsObs(?a,?b,app(_t,?g),?c,?d) |- |

rule hacky3 :
  | v = app(_t,cons(_x,?f)) | lsObs(?a,?b,app(_t,cons(_x,?g)),?c,?d) |- |
where 
  _x,_t notincontext
if
  | v = app(_t2,?f) | lsObs(?a,?b,app(_t2,?g),?c,?d) |- |
*/

/*
rewrite hacky_new :
  cons(_x,cons(_y,?z)) = app(?w,?z)
without 
  cons(_x,cons(_y,?z)) = app(?q,?z)

rewrite hacky_one :
  app(_x,cons(_y,?z)) = app(?w,?z)
without 
  app(_x,cons(_y,?z)) = app(?q,?z)

rewrite hacky_two :
  app(_x,app(_y,?z)) = app(?w,?z)
without 
  app(_x,app(_y,?z)) = app(?q,?z)
*/



rewrite hack1 :
  cons(_z,cons(_x,?y)) = app(elist(cons(_z,s(_x))), ?y)

/* Try this later 
rewrite hack1 :
  cons(_x,?y) = app(elist(s(_x)), ?y)
*/

rewrite hack2_e : 
  app(elist(?z),cons(_x,?y)) = app(elist(app(?z,s(_x))), ?y)

rewrite hack3_e : 
  app(elist(?z),app(elist(?x),?y)) = app(elist(app(?z,?x)), ?y)

rewrite hack2 : 
  app(_z,cons(_x,?y)) = app(elist(app(_z,s(_x))), ?y)

rewrite hack3 : 
  app(_z,app(elist(?x),?y)) = app(elist(app(_z,?x)), ?y)

rewrite hack4 : 
  cons(_z,app(elist(?x),?y)) = app(elist(s(_z),?x), ?y)

rewrite hack4 : 
  cons(_z,app(_x,?y)) = app(elist(s(_z),_x), ?y)

rewrite hack5 : 
  elist(?x) = id(?w)
without 
  elist(?x) = id(?q)

rewrite hack5 : 
  id(?w) = ?w

  





rule  foobar:
| numeric_const("0") != numeric_const("1") | |- |
if
| | |- |





rewrite false: false() = numeric_const("0")

rewrite true : true() = numeric_const("1")



rule numericrule:
  | numeric_const(?x) = numeric_const(?y) | |- |
without 
  ?x=?y
if
  | ?x = ?y | |- |


rule numericrule_neq:
  | numeric_const(?x) != numeric_const(?y) | |- |
without 
  ?x!=?y
if
  | ?x != ?y | |- |



rule zeroone:
  | "0" = "1" | |- |
if