class java.lang.Object
{
  void <init>() static: { } { };
}

class java.util.Iterator
{
void <init>() static: { } { };

// Anyhow, I assume that the given iterator is pointing to the beginning of a segment.
// What we have already traversed is not shown in the pre. 
 boolean hasNext() : 
{ Iterator(@this:,_x) } 
{ $ret_v1=false() * _x=nil() * Iterator(@this:,nil())
  || $ret_v1=true() * _x!=nil() * Iterator(@this:,_x) };


java.lang.Object next() :
{ ls(_x,_y,_v1) * Iterator(@this:,_x) }
{ $ret_v1=_v * _v1=cons(_v,empty()) * ls(_x,_y,cons(_v,empty())) * Iterator(@this:,_y)
  ||
  $ret_v1=_v * _v1=cons(_v,_v2) *  ls(_x,_x1,cons(_v,empty())) * ls(_x1,_y,_v2) * Iterator(@this:,_x1)
};


}

class java.util.LinkedList
{
void <init>() static: { } { @this: = nil() };

 boolean add(java.lang.Object) : 
  { lspe(@this:,nil(),_s1) }
  { ls(@this:,nil(),app(_s1,cons(@parameter0:,empty())))};

// ddino:
// Iterator(x,y) means the iterator x is currently at position y
java.util.Iterator iterator() :
  { lspe(@this:,nil(),_v)}
  { _I=$ret_v1 * lspe(@this:,nil(),_v) * Iterator(_I,@this:)};

int size() :
  { lspe(@this:,nil(),_v)}
  { length(_v)=$ret_v1 * ls(@this:,nil(),_v)};

java.lang.Object remove(int) :
{ @parameter0: < length(_v1) * ls(@this:,nil(),_v1)} 
{ @this: = $ret_v1 * _v1=app(_v2, cons(_v3,_v4)) * length(_v2) = @parameter0: * lspe(@this:,nil(),app(_v2,_v4)) };

// ddino: this is strange. I don't understand why we need this that return boolean???????
// I cannot find it in the code!!!!
boolean remove(java.lang.Object) :
  { ls(@this:,nil(),app(_s0,cons(@parameter0:,_s1))) }
  { lspe(@this:,nil(),app(_s0,_s1))};

}


class Observer
{

void update(Subject) : 
{ Observer(@this:,{vals=_v; subject=@parameter0:}) * SubjectData(@parameter0:, {vals=_v2}) } 
{ Observer(@this:,{vals=_v2; subject=@parameter0:}) * SubjectData(@parameter0:, {vals=_v2}) } ;

}


class Driver
{
void <init>() static: { } { };

void main(java.lang.String[]) static: { } { };

}


class IntegerSize
{
define Observer(x, vals=V; subject=s) = 
	   s : IntegerDataBag * field(x,"<IntegerSize: int size>", length(V))
	   * field(x,"<IntegerSize: IntegerDataBag bag>", s);

void <init>(IntegerDataBag) static: 
       { @this: : IntegerSize * @parameter0: : IntegerDataBag * SubjectObs(@parameter0:,{obs=_O;vals=_V})} 
       { SubjectObs(@parameter0:, {obs=add(@this:,_O);vals=_V}) };

void update(Subject) : 
  { Observer$(@this:,{vals=_v; subject=@parameter0:}) * SubjectData(@parameter0:, {vals=_v2}) } 
  { Observer$(@this:,{vals=_v2; subject=@parameter0:}) * SubjectData(@parameter0:, {vals=_v2}) } ;

}



class Subject
{
void addObserver(Observer) : 
{ SubjectObs(@this:, {obs=_O; vals=_V}) * Observer(@parameter0:, {vals=_V2; subject=@this:}) }
{ SubjectObs(@this:, {obs=add(@parameter0:,_O); vals=_V} ) };

void removeObserver(Observer) : 
{ SubjectObs(@this:, {obs=add(@parameter0:,_O); vals=_V} ) }
{ SubjectObs(@this:, {obs=_O; vals=_V}) * Observer(@parameter0:, {vals=_v2; subject=_s}) };

}

class IntegerDataBag
{
define SubjectInternal(s, obs=O) =
    field(s,"<IntegerDataBag: java.util.LinkedList observers>",_o)*
    lspe(_o,nil(),O) ;

export SubjectData(s, vals=V) = 
    field(s,"<IntegerDataBag: java.util.LinkedList list>",_l)*
    lspe(_l,nil(),V) ;

define Subject(s, obs=O; vals=V) =
    SubjectInternal$IntegerDataBag(s,{obs=O}) *
    SubjectData(s, {vals=V}) ;

define SubjectObs(s, obs=O; vals=V) =
 Subject$IntegerDataBag(s,{obs=O;vals=V}) * ObsSet(O,V,s);



void <init>() : 
{ } 
{ Subject$(@this:, {obs=empty(); vals=empty()}) };

void <init>() static: 
{ } 
{ SubjectData$IntegerDataBag(@this:, {vals=empty()}) * SubjectInternal$IntegerDataBag(@this:, {obs=empty()}) };

void beginModification() : 
{ SubjectObs$(@this:, {obs=_O; vals=_V}) }
{ SubjectInternal$(@this:, {obs=_O}) * SubjectData(@this:, {vals=_V}) * ObsSet(_O,_V,@this:) };

void endModification() : 
{ SubjectInternal$(@this:, {obs=_O}) * SubjectData(@this:, {vals=_V2}) * ObsSet(_O,_V,@this:) }
{ SubjectObs$(@this:, {obs=_O; vals=_V2}) };

void addObserver(Observer) : 
{ SubjectObs$(@this:, {obs=_O; vals=_V}) * Observer(@parameter0:, {vals=_V2; subject=@this:}) }
{ SubjectObs$(@this:, {obs=add(@parameter0:,_O); vals=_V} ) };

void removeObserver(Observer) : 
{ SubjectObs$(@this:, {obs=add(@parameter0:,_O); vals=_V} ) }
{ SubjectObs$(@this:, {obs=_O; vals=_V}) * Observer(@parameter0:, {vals=_v2; subject=_s}) };

void notifyObservers() : 
{ Subject$(@this:, {obs=_O; vals=_V}) * ObsSet(_O, _V2, @this:) }
{ Subject$(@this:, {obs=_O; vals=_V}) * ObsSet(_O, _V, @this:) };

void notifyObservers(java.util.Iterator) :
{ Iterator(@parameter0:,_x) 
  * lspe(_x,nil(), _O) 
  * ObsSet(_O, _, @this:) 
  * SubjectData(@this:,{vals=_V}) }
{ lspe(_x, nil(), _O)
  * ObsSet(_O,_V, @this:)
  * SubjectData(@this:, {vals=_V}) };
}



class IntegerPrinter
{
void <init>(IntegerDataBag) static: { } { };

void update(Subject) static:
  { Observer(@this:,{vals=_v; subject=@parameter0:}) * SubjectData(@parameter0:, {vals=_v2}) } 
  { Observer(@this:,{vals=_v2; subject=@parameter0:}) * SubjectData(@parameter0:, {vals=_v2}) } ;

}
